"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.PredefinedScope = exports.asPermissionsObject = exports.isPermissionsObject = exports.AllDataReadWrite = exports.asTopicPermission = exports.isTopicPermission = exports.isTopicName = exports.TopicRole = exports.asCachePermission = exports.isCachePermission = exports.isCacheName = exports.AllTopics = exports.AllCaches = exports.CacheRole = void 0;
var CacheRole;
(function (CacheRole) {
    CacheRole["ReadWrite"] = "readwrite";
    CacheRole["ReadOnly"] = "readonly";
})(CacheRole = exports.CacheRole || (exports.CacheRole = {}));
class All {
}
exports.AllCaches = new All();
exports.AllTopics = new All();
function isCacheName(cache) {
    return 'name' in cache;
}
exports.isCacheName = isCacheName;
function isCachePermission(p) {
    return 'role' in p && 'cache' in p && !('topic' in p);
}
exports.isCachePermission = isCachePermission;
function asCachePermission(p) {
    if (!isCachePermission(p)) {
        throw new Error(`permission is not a CachePermission object: ${JSON.stringify(p)}`);
    }
    return p;
}
exports.asCachePermission = asCachePermission;
var TopicRole;
(function (TopicRole) {
    TopicRole["PublishSubscribe"] = "publishsubscribe";
    TopicRole["SubscribeOnly"] = "subscribeonly";
})(TopicRole = exports.TopicRole || (exports.TopicRole = {}));
function isTopicName(topic) {
    return 'name' in topic;
}
exports.isTopicName = isTopicName;
function isTopicPermission(p) {
    return 'role' in p && 'cache' in p && 'topic' in p;
}
exports.isTopicPermission = isTopicPermission;
function asTopicPermission(p) {
    if (!isTopicPermission(p)) {
        throw new Error(`permission is not a TopicPermission object: ${JSON.stringify(p)}`);
    }
    return p;
}
exports.asTopicPermission = asTopicPermission;
exports.AllDataReadWrite = {
    permissions: [
        { role: CacheRole.ReadWrite, cache: exports.AllCaches },
        { role: TopicRole.PublishSubscribe, cache: exports.AllCaches, topic: exports.AllTopics },
    ],
};
function isPermissionObject(p) {
    return isCachePermission(p) || isTopicPermission(p);
}
function isPermissionsObject(scope) {
    if (!('permissions' in scope)) {
        return false;
    }
    const permissions = scope.permissions;
    return permissions.every(p => isPermissionObject(p));
}
exports.isPermissionsObject = isPermissionsObject;
function asPermissionsObject(scope) {
    if (!isPermissionsObject(scope)) {
        throw new Error(`Token scope is not a Permissions object: ${JSON.stringify(scope)}`);
    }
    return scope;
}
exports.asPermissionsObject = asPermissionsObject;
class PredefinedScope {
}
exports.PredefinedScope = PredefinedScope;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidG9rZW4tc2NvcGUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvYXV0aC90b2tlbnMvdG9rZW4tc2NvcGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEsSUFBWSxTQUdYO0FBSEQsV0FBWSxTQUFTO0lBQ25CLG9DQUF1QixDQUFBO0lBQ3ZCLGtDQUFxQixDQUFBO0FBQ3ZCLENBQUMsRUFIVyxTQUFTLEdBQVQsaUJBQVMsS0FBVCxpQkFBUyxRQUdwQjtBQUVELE1BQU0sR0FBRztDQUFHO0FBQ0MsUUFBQSxTQUFTLEdBQUcsSUFBSSxHQUFHLEVBQUUsQ0FBQztBQUN0QixRQUFBLFNBQVMsR0FBRyxJQUFJLEdBQUcsRUFBRSxDQUFDO0FBS25DLFNBQWdCLFdBQVcsQ0FBQyxLQUFzQjtJQUNoRCxPQUFPLE1BQU0sSUFBSSxLQUFLLENBQUM7QUFDekIsQ0FBQztBQUZELGtDQUVDO0FBV0QsU0FBZ0IsaUJBQWlCLENBQUMsQ0FBYTtJQUM3QyxPQUFPLE1BQU0sSUFBSSxDQUFDLElBQUksT0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsT0FBTyxJQUFJLENBQUMsQ0FBQyxDQUFDO0FBQ3hELENBQUM7QUFGRCw4Q0FFQztBQUVELFNBQWdCLGlCQUFpQixDQUFDLENBQWE7SUFDN0MsSUFBSSxDQUFDLGlCQUFpQixDQUFDLENBQUMsQ0FBQyxFQUFFO1FBQ3pCLE1BQU0sSUFBSSxLQUFLLENBQ2IsK0NBQStDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FDbkUsQ0FBQztLQUNIO0lBQ0QsT0FBTyxDQUFvQixDQUFDO0FBQzlCLENBQUM7QUFQRCw4Q0FPQztBQUVELElBQVksU0FHWDtBQUhELFdBQVksU0FBUztJQUNuQixrREFBcUMsQ0FBQTtJQUNyQyw0Q0FBK0IsQ0FBQTtBQUNqQyxDQUFDLEVBSFcsU0FBUyxHQUFULGlCQUFTLEtBQVQsaUJBQVMsUUFHcEI7QUFLRCxTQUFnQixXQUFXLENBQUMsS0FBc0I7SUFDaEQsT0FBTyxNQUFNLElBQUksS0FBSyxDQUFDO0FBQ3pCLENBQUM7QUFGRCxrQ0FFQztBQWVELFNBQWdCLGlCQUFpQixDQUFDLENBQWE7SUFDN0MsT0FBTyxNQUFNLElBQUksQ0FBQyxJQUFJLE9BQU8sSUFBSSxDQUFDLElBQUksT0FBTyxJQUFJLENBQUMsQ0FBQztBQUNyRCxDQUFDO0FBRkQsOENBRUM7QUFFRCxTQUFnQixpQkFBaUIsQ0FBQyxDQUFhO0lBQzdDLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDLENBQUMsRUFBRTtRQUN6QixNQUFNLElBQUksS0FBSyxDQUNiLCtDQUErQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQ25FLENBQUM7S0FDSDtJQUNELE9BQU8sQ0FBb0IsQ0FBQztBQUM5QixDQUFDO0FBUEQsOENBT0M7QUFRWSxRQUFBLGdCQUFnQixHQUFnQjtJQUMzQyxXQUFXLEVBQUU7UUFDWCxFQUFDLElBQUksRUFBRSxTQUFTLENBQUMsU0FBUyxFQUFFLEtBQUssRUFBRSxpQkFBUyxFQUFDO1FBQzdDLEVBQUMsSUFBSSxFQUFFLFNBQVMsQ0FBQyxnQkFBZ0IsRUFBRSxLQUFLLEVBQUUsaUJBQVMsRUFBRSxLQUFLLEVBQUUsaUJBQVMsRUFBQztLQUN2RTtDQUNGLENBQUM7QUFFRixTQUFTLGtCQUFrQixDQUFDLENBQWE7SUFDdkMsT0FBTyxpQkFBaUIsQ0FBQyxDQUFDLENBQUMsSUFBSSxpQkFBaUIsQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUN0RCxDQUFDO0FBRUQsU0FBZ0IsbUJBQW1CLENBQUMsS0FBaUI7SUFDbkQsSUFBSSxDQUFDLENBQUMsYUFBYSxJQUFJLEtBQUssQ0FBQyxFQUFFO1FBQzdCLE9BQU8sS0FBSyxDQUFDO0tBQ2Q7SUFDRCxNQUFNLFdBQVcsR0FBRyxLQUFLLENBQUMsV0FBVyxDQUFDO0lBQ3RDLE9BQU8sV0FBVyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLGtCQUFrQixDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDdkQsQ0FBQztBQU5ELGtEQU1DO0FBRUQsU0FBZ0IsbUJBQW1CLENBQUMsS0FBaUI7SUFDbkQsSUFBSSxDQUFDLG1CQUFtQixDQUFDLEtBQUssQ0FBQyxFQUFFO1FBQy9CLE1BQU0sSUFBSSxLQUFLLENBQ2IsNENBQTRDLElBQUksQ0FBQyxTQUFTLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FDcEUsQ0FBQztLQUNIO0lBQ0QsT0FBTyxLQUFvQixDQUFDO0FBQzlCLENBQUM7QUFQRCxrREFPQztBQUVELE1BQXNCLGVBQWU7Q0FBRztBQUF4QywwQ0FBd0MiLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZW51bSBDYWNoZVJvbGUge1xuICBSZWFkV3JpdGUgPSAncmVhZHdyaXRlJyxcbiAgUmVhZE9ubHkgPSAncmVhZG9ubHknLFxufVxuXG5jbGFzcyBBbGwge31cbmV4cG9ydCBjb25zdCBBbGxDYWNoZXMgPSBuZXcgQWxsKCk7XG5leHBvcnQgY29uc3QgQWxsVG9waWNzID0gbmV3IEFsbCgpO1xuXG5leHBvcnQgaW50ZXJmYWNlIENhY2hlTmFtZSB7XG4gIG5hbWU6IHN0cmluZztcbn1cbmV4cG9ydCBmdW5jdGlvbiBpc0NhY2hlTmFtZShjYWNoZTogQ2FjaGVOYW1lIHwgQWxsKTogY2FjaGUgaXMgQ2FjaGVOYW1lIHtcbiAgcmV0dXJuICduYW1lJyBpbiBjYWNoZTtcbn1cbmV4cG9ydCB0eXBlIENhY2hlU2VsZWN0b3IgPSBBbGwgfCBDYWNoZU5hbWUgfCBzdHJpbmc7XG5cbmV4cG9ydCBpbnRlcmZhY2UgQ2FjaGVQZXJtaXNzaW9uIHtcbiAgcm9sZTogQ2FjaGVSb2xlO1xuICAvKipcbiAgICogU2NvcGUgdGhlIHRva2VuIHBlcm1pc3Npb25zIHRvIHNlbGVjdCBjYWNoZXNcbiAgICovXG4gIGNhY2hlOiBDYWNoZVNlbGVjdG9yO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaXNDYWNoZVBlcm1pc3Npb24ocDogUGVybWlzc2lvbik6IGJvb2xlYW4ge1xuICByZXR1cm4gJ3JvbGUnIGluIHAgJiYgJ2NhY2hlJyBpbiBwICYmICEoJ3RvcGljJyBpbiBwKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGFzQ2FjaGVQZXJtaXNzaW9uKHA6IFBlcm1pc3Npb24pOiBDYWNoZVBlcm1pc3Npb24ge1xuICBpZiAoIWlzQ2FjaGVQZXJtaXNzaW9uKHApKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgYHBlcm1pc3Npb24gaXMgbm90IGEgQ2FjaGVQZXJtaXNzaW9uIG9iamVjdDogJHtKU09OLnN0cmluZ2lmeShwKX1gXG4gICAgKTtcbiAgfVxuICByZXR1cm4gcCBhcyBDYWNoZVBlcm1pc3Npb247XG59XG5cbmV4cG9ydCBlbnVtIFRvcGljUm9sZSB7XG4gIFB1Ymxpc2hTdWJzY3JpYmUgPSAncHVibGlzaHN1YnNjcmliZScsXG4gIFN1YnNjcmliZU9ubHkgPSAnc3Vic2NyaWJlb25seScsXG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgVG9waWNOYW1lIHtcbiAgbmFtZTogc3RyaW5nO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGlzVG9waWNOYW1lKHRvcGljOiBUb3BpY05hbWUgfCBBbGwpOiB0b3BpYyBpcyBUb3BpY05hbWUge1xuICByZXR1cm4gJ25hbWUnIGluIHRvcGljO1xufVxuZXhwb3J0IHR5cGUgVG9waWNTZWxlY3RvciA9IEFsbCB8IFRvcGljTmFtZSB8IHN0cmluZztcblxuZXhwb3J0IGludGVyZmFjZSBUb3BpY1Blcm1pc3Npb24ge1xuICByb2xlOiBUb3BpY1JvbGU7XG4gIC8qKlxuICAgKiBTY29wZSB0aGUgdG9rZW4gcGVybWlzc2lvbnMgdG8gc2VsZWN0IGNhY2hlc1xuICAgKi9cbiAgY2FjaGU6IENhY2hlU2VsZWN0b3I7XG4gIC8qKlxuICAgKiBTY29wZSB0aGUgdG9rZW4gcGVybWlzc2lvbnMgdG8gc2VsZWN0IHRvcGljc1xuICAgKi9cbiAgdG9waWM6IFRvcGljU2VsZWN0b3I7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpc1RvcGljUGVybWlzc2lvbihwOiBQZXJtaXNzaW9uKTogYm9vbGVhbiB7XG4gIHJldHVybiAncm9sZScgaW4gcCAmJiAnY2FjaGUnIGluIHAgJiYgJ3RvcGljJyBpbiBwO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gYXNUb3BpY1Blcm1pc3Npb24ocDogUGVybWlzc2lvbik6IFRvcGljUGVybWlzc2lvbiB7XG4gIGlmICghaXNUb3BpY1Blcm1pc3Npb24ocCkpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICBgcGVybWlzc2lvbiBpcyBub3QgYSBUb3BpY1Blcm1pc3Npb24gb2JqZWN0OiAke0pTT04uc3RyaW5naWZ5KHApfWBcbiAgICApO1xuICB9XG4gIHJldHVybiBwIGFzIFRvcGljUGVybWlzc2lvbjtcbn1cblxuZXhwb3J0IHR5cGUgUGVybWlzc2lvbiA9IENhY2hlUGVybWlzc2lvbiB8IFRvcGljUGVybWlzc2lvbjtcblxuZXhwb3J0IGludGVyZmFjZSBQZXJtaXNzaW9ucyB7XG4gIHBlcm1pc3Npb25zOiBBcnJheTxQZXJtaXNzaW9uPjtcbn1cblxuZXhwb3J0IGNvbnN0IEFsbERhdGFSZWFkV3JpdGU6IFBlcm1pc3Npb25zID0ge1xuICBwZXJtaXNzaW9uczogW1xuICAgIHtyb2xlOiBDYWNoZVJvbGUuUmVhZFdyaXRlLCBjYWNoZTogQWxsQ2FjaGVzfSxcbiAgICB7cm9sZTogVG9waWNSb2xlLlB1Ymxpc2hTdWJzY3JpYmUsIGNhY2hlOiBBbGxDYWNoZXMsIHRvcGljOiBBbGxUb3BpY3N9LFxuICBdLFxufTtcblxuZnVuY3Rpb24gaXNQZXJtaXNzaW9uT2JqZWN0KHA6IFBlcm1pc3Npb24pOiBib29sZWFuIHtcbiAgcmV0dXJuIGlzQ2FjaGVQZXJtaXNzaW9uKHApIHx8IGlzVG9waWNQZXJtaXNzaW9uKHApO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaXNQZXJtaXNzaW9uc09iamVjdChzY29wZTogVG9rZW5TY29wZSk6IGJvb2xlYW4ge1xuICBpZiAoISgncGVybWlzc2lvbnMnIGluIHNjb3BlKSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICBjb25zdCBwZXJtaXNzaW9ucyA9IHNjb3BlLnBlcm1pc3Npb25zO1xuICByZXR1cm4gcGVybWlzc2lvbnMuZXZlcnkocCA9PiBpc1Blcm1pc3Npb25PYmplY3QocCkpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gYXNQZXJtaXNzaW9uc09iamVjdChzY29wZTogVG9rZW5TY29wZSk6IFBlcm1pc3Npb25zIHtcbiAgaWYgKCFpc1Blcm1pc3Npb25zT2JqZWN0KHNjb3BlKSkge1xuICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgIGBUb2tlbiBzY29wZSBpcyBub3QgYSBQZXJtaXNzaW9ucyBvYmplY3Q6ICR7SlNPTi5zdHJpbmdpZnkoc2NvcGUpfWBcbiAgICApO1xuICB9XG4gIHJldHVybiBzY29wZSBhcyBQZXJtaXNzaW9ucztcbn1cblxuZXhwb3J0IGFic3RyYWN0IGNsYXNzIFByZWRlZmluZWRTY29wZSB7fVxuXG5leHBvcnQgdHlwZSBUb2tlblNjb3BlID1cbiAgfCB0eXBlb2YgQWxsRGF0YVJlYWRXcml0ZVxuICB8IFBlcm1pc3Npb25zXG4gIHwgUHJlZGVmaW5lZFNjb3BlO1xuIl19