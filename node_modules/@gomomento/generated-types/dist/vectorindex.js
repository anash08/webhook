"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.vectorindex = void 0;
/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.18.1
 * source: vectorindex.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
const pb_1 = __importStar(require("google-protobuf"));
const grpc_1 = __importStar(require("@grpc/grpc-js"));
var vectorindex;
(function (vectorindex) {
    var __Item_one_of_decls, __UpsertItemBatchRequest_one_of_decls, __UpsertItemBatchResponse_one_of_decls, __Vector_one_of_decls, __Metadata_one_of_decls, __MetadataRequest_one_of_decls, __SearchRequest_one_of_decls, __SearchHit_one_of_decls, __SearchResponse_one_of_decls;
    class _Item extends pb_1.Message {
        constructor(data) {
            super();
            __Item_one_of_decls.set(this, []);
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [3], __classPrivateFieldGet(this, __Item_one_of_decls, "f"));
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
                if ("vector" in data && data.vector != undefined) {
                    this.vector = data.vector;
                }
                if ("metadata" in data && data.metadata != undefined) {
                    this.metadata = data.metadata;
                }
            }
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "");
        }
        set id(value) {
            pb_1.Message.setField(this, 1, value);
        }
        get vector() {
            return pb_1.Message.getWrapperField(this, _Vector, 2);
        }
        set vector(value) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_vector() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get metadata() {
            return pb_1.Message.getRepeatedWrapperField(this, _Metadata, 3);
        }
        set metadata(value) {
            pb_1.Message.setRepeatedWrapperField(this, 3, value);
        }
        static fromObject(data) {
            const message = new _Item({});
            if (data.id != null) {
                message.id = data.id;
            }
            if (data.vector != null) {
                message.vector = _Vector.fromObject(data.vector);
            }
            if (data.metadata != null) {
                message.metadata = data.metadata.map(item => _Metadata.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data = {};
            if (this.id != null) {
                data.id = this.id;
            }
            if (this.vector != null) {
                data.vector = this.vector.toObject();
            }
            if (this.metadata != null) {
                data.metadata = this.metadata.map((item) => item.toObject());
            }
            return data;
        }
        serialize(w) {
            const writer = w || new pb_1.BinaryWriter();
            if (this.id.length)
                writer.writeString(1, this.id);
            if (this.has_vector)
                writer.writeMessage(2, this.vector, () => this.vector.serialize(writer));
            if (this.metadata.length)
                writer.writeRepeatedMessage(3, this.metadata, (item) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes) {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new _Item();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id = reader.readString();
                        break;
                    case 2:
                        reader.readMessage(message.vector, () => message.vector = _Vector.deserialize(reader));
                        break;
                    case 3:
                        reader.readMessage(message.metadata, () => pb_1.Message.addToRepeatedWrapperField(message, 3, _Metadata.deserialize(reader), _Metadata));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary() {
            return this.serialize();
        }
        static deserializeBinary(bytes) {
            return _Item.deserialize(bytes);
        }
    }
    __Item_one_of_decls = new WeakMap();
    vectorindex._Item = _Item;
    class _UpsertItemBatchRequest extends pb_1.Message {
        constructor(data) {
            super();
            __UpsertItemBatchRequest_one_of_decls.set(this, []);
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2], __classPrivateFieldGet(this, __UpsertItemBatchRequest_one_of_decls, "f"));
            if (!Array.isArray(data) && typeof data == "object") {
                if ("index_name" in data && data.index_name != undefined) {
                    this.index_name = data.index_name;
                }
                if ("items" in data && data.items != undefined) {
                    this.items = data.items;
                }
            }
        }
        get index_name() {
            return pb_1.Message.getFieldWithDefault(this, 1, "");
        }
        set index_name(value) {
            pb_1.Message.setField(this, 1, value);
        }
        get items() {
            return pb_1.Message.getRepeatedWrapperField(this, _Item, 2);
        }
        set items(value) {
            pb_1.Message.setRepeatedWrapperField(this, 2, value);
        }
        static fromObject(data) {
            const message = new _UpsertItemBatchRequest({});
            if (data.index_name != null) {
                message.index_name = data.index_name;
            }
            if (data.items != null) {
                message.items = data.items.map(item => _Item.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data = {};
            if (this.index_name != null) {
                data.index_name = this.index_name;
            }
            if (this.items != null) {
                data.items = this.items.map((item) => item.toObject());
            }
            return data;
        }
        serialize(w) {
            const writer = w || new pb_1.BinaryWriter();
            if (this.index_name.length)
                writer.writeString(1, this.index_name);
            if (this.items.length)
                writer.writeRepeatedMessage(2, this.items, (item) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes) {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new _UpsertItemBatchRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.index_name = reader.readString();
                        break;
                    case 2:
                        reader.readMessage(message.items, () => pb_1.Message.addToRepeatedWrapperField(message, 2, _Item.deserialize(reader), _Item));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary() {
            return this.serialize();
        }
        static deserializeBinary(bytes) {
            return _UpsertItemBatchRequest.deserialize(bytes);
        }
    }
    __UpsertItemBatchRequest_one_of_decls = new WeakMap();
    vectorindex._UpsertItemBatchRequest = _UpsertItemBatchRequest;
    class _UpsertItemBatchResponse extends pb_1.Message {
        constructor(data) {
            super();
            __UpsertItemBatchResponse_one_of_decls.set(this, []);
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], __classPrivateFieldGet(this, __UpsertItemBatchResponse_one_of_decls, "f"));
            if (!Array.isArray(data) && typeof data == "object") {
                if ("error_indices" in data && data.error_indices != undefined) {
                    this.error_indices = data.error_indices;
                }
            }
        }
        get error_indices() {
            return pb_1.Message.getFieldWithDefault(this, 1, []);
        }
        set error_indices(value) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data) {
            const message = new _UpsertItemBatchResponse({});
            if (data.error_indices != null) {
                message.error_indices = data.error_indices;
            }
            return message;
        }
        toObject() {
            const data = {};
            if (this.error_indices != null) {
                data.error_indices = this.error_indices;
            }
            return data;
        }
        serialize(w) {
            const writer = w || new pb_1.BinaryWriter();
            if (this.error_indices.length)
                writer.writePackedUint32(1, this.error_indices);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes) {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new _UpsertItemBatchResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.error_indices = reader.readPackedUint32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary() {
            return this.serialize();
        }
        static deserializeBinary(bytes) {
            return _UpsertItemBatchResponse.deserialize(bytes);
        }
    }
    __UpsertItemBatchResponse_one_of_decls = new WeakMap();
    vectorindex._UpsertItemBatchResponse = _UpsertItemBatchResponse;
    class _Vector extends pb_1.Message {
        constructor(data) {
            super();
            __Vector_one_of_decls.set(this, []);
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], __classPrivateFieldGet(this, __Vector_one_of_decls, "f"));
            if (!Array.isArray(data) && typeof data == "object") {
                if ("elements" in data && data.elements != undefined) {
                    this.elements = data.elements;
                }
            }
        }
        get elements() {
            return pb_1.Message.getFieldWithDefault(this, 1, []);
        }
        set elements(value) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data) {
            const message = new _Vector({});
            if (data.elements != null) {
                message.elements = data.elements;
            }
            return message;
        }
        toObject() {
            const data = {};
            if (this.elements != null) {
                data.elements = this.elements;
            }
            return data;
        }
        serialize(w) {
            const writer = w || new pb_1.BinaryWriter();
            if (this.elements.length)
                writer.writePackedFloat(1, this.elements);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes) {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new _Vector();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.elements = reader.readPackedFloat();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary() {
            return this.serialize();
        }
        static deserializeBinary(bytes) {
            return _Vector.deserialize(bytes);
        }
    }
    __Vector_one_of_decls = new WeakMap();
    vectorindex._Vector = _Vector;
    class _Metadata extends pb_1.Message {
        constructor(data) {
            super();
            __Metadata_one_of_decls.set(this, [[2]]);
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], __classPrivateFieldGet(this, __Metadata_one_of_decls, "f"));
            if (!Array.isArray(data) && typeof data == "object") {
                if ("field" in data && data.field != undefined) {
                    this.field = data.field;
                }
                if ("string_value" in data && data.string_value != undefined) {
                    this.string_value = data.string_value;
                }
            }
        }
        get field() {
            return pb_1.Message.getFieldWithDefault(this, 1, "");
        }
        set field(value) {
            pb_1.Message.setField(this, 1, value);
        }
        get string_value() {
            return pb_1.Message.getFieldWithDefault(this, 2, "");
        }
        set string_value(value) {
            pb_1.Message.setOneofField(this, 2, __classPrivateFieldGet(this, __Metadata_one_of_decls, "f")[0], value);
        }
        get has_string_value() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get value() {
            const cases = {
                0: "none",
                2: "string_value"
            };
            return cases[pb_1.Message.computeOneofCase(this, [2])];
        }
        static fromObject(data) {
            const message = new _Metadata({});
            if (data.field != null) {
                message.field = data.field;
            }
            if (data.string_value != null) {
                message.string_value = data.string_value;
            }
            return message;
        }
        toObject() {
            const data = {};
            if (this.field != null) {
                data.field = this.field;
            }
            if (this.string_value != null) {
                data.string_value = this.string_value;
            }
            return data;
        }
        serialize(w) {
            const writer = w || new pb_1.BinaryWriter();
            if (this.field.length)
                writer.writeString(1, this.field);
            if (this.has_string_value)
                writer.writeString(2, this.string_value);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes) {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new _Metadata();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.field = reader.readString();
                        break;
                    case 2:
                        message.string_value = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary() {
            return this.serialize();
        }
        static deserializeBinary(bytes) {
            return _Metadata.deserialize(bytes);
        }
    }
    __Metadata_one_of_decls = new WeakMap();
    vectorindex._Metadata = _Metadata;
    class _MetadataRequest extends pb_1.Message {
        constructor(data) {
            super();
            __MetadataRequest_one_of_decls.set(this, [[2]]);
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], __classPrivateFieldGet(this, __MetadataRequest_one_of_decls, "f"));
            if (!Array.isArray(data) && typeof data == "object") {
                if ("some" in data && data.some != undefined) {
                    this.some = data.some;
                }
            }
        }
        get some() {
            return pb_1.Message.getWrapperField(this, _MetadataRequest.Some, 2);
        }
        set some(value) {
            pb_1.Message.setOneofWrapperField(this, 2, __classPrivateFieldGet(this, __MetadataRequest_one_of_decls, "f")[0], value);
        }
        get has_some() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get kind() {
            const cases = {
                0: "none",
                2: "some"
            };
            return cases[pb_1.Message.computeOneofCase(this, [2])];
        }
        static fromObject(data) {
            const message = new _MetadataRequest({});
            if (data.some != null) {
                message.some = _MetadataRequest.Some.fromObject(data.some);
            }
            return message;
        }
        toObject() {
            const data = {};
            if (this.some != null) {
                data.some = this.some.toObject();
            }
            return data;
        }
        serialize(w) {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_some)
                writer.writeMessage(2, this.some, () => this.some.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes) {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new _MetadataRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 2:
                        reader.readMessage(message.some, () => message.some = _MetadataRequest.Some.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary() {
            return this.serialize();
        }
        static deserializeBinary(bytes) {
            return _MetadataRequest.deserialize(bytes);
        }
    }
    __MetadataRequest_one_of_decls = new WeakMap();
    vectorindex._MetadataRequest = _MetadataRequest;
    (function (_MetadataRequest) {
        var _Some_one_of_decls, _All_one_of_decls;
        class Some extends pb_1.Message {
            constructor(data) {
                super();
                _Some_one_of_decls.set(this, []);
                pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], __classPrivateFieldGet(this, _Some_one_of_decls, "f"));
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("fields" in data && data.fields != undefined) {
                        this.fields = data.fields;
                    }
                }
            }
            get fields() {
                return pb_1.Message.getFieldWithDefault(this, 1, []);
            }
            set fields(value) {
                pb_1.Message.setField(this, 1, value);
            }
            static fromObject(data) {
                const message = new Some({});
                if (data.fields != null) {
                    message.fields = data.fields;
                }
                return message;
            }
            toObject() {
                const data = {};
                if (this.fields != null) {
                    data.fields = this.fields;
                }
                return data;
            }
            serialize(w) {
                const writer = w || new pb_1.BinaryWriter();
                if (this.fields.length)
                    writer.writeRepeatedString(1, this.fields);
                if (!w)
                    return writer.getResultBuffer();
            }
            static deserialize(bytes) {
                const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Some();
                while (reader.nextField()) {
                    if (reader.isEndGroup())
                        break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            pb_1.Message.addToRepeatedField(message, 1, reader.readString());
                            break;
                        default: reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary() {
                return this.serialize();
            }
            static deserializeBinary(bytes) {
                return Some.deserialize(bytes);
            }
        }
        _Some_one_of_decls = new WeakMap();
        _MetadataRequest.Some = Some;
        class All extends pb_1.Message {
            constructor(data) {
                super();
                _All_one_of_decls.set(this, []);
                pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], __classPrivateFieldGet(this, _All_one_of_decls, "f"));
                if (!Array.isArray(data) && typeof data == "object") { }
            }
            static fromObject(data) {
                const message = new All({});
                return message;
            }
            toObject() {
                const data = {};
                return data;
            }
            serialize(w) {
                const writer = w || new pb_1.BinaryWriter();
                if (!w)
                    return writer.getResultBuffer();
            }
            static deserialize(bytes) {
                const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new All();
                while (reader.nextField()) {
                    if (reader.isEndGroup())
                        break;
                    switch (reader.getFieldNumber()) {
                        default: reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary() {
                return this.serialize();
            }
            static deserializeBinary(bytes) {
                return All.deserialize(bytes);
            }
        }
        _All_one_of_decls = new WeakMap();
        _MetadataRequest.All = All;
    })(_MetadataRequest = vectorindex._MetadataRequest || (vectorindex._MetadataRequest = {}));
    class _SearchRequest extends pb_1.Message {
        constructor(data) {
            super();
            __SearchRequest_one_of_decls.set(this, []);
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], __classPrivateFieldGet(this, __SearchRequest_one_of_decls, "f"));
            if (!Array.isArray(data) && typeof data == "object") {
                if ("index_name" in data && data.index_name != undefined) {
                    this.index_name = data.index_name;
                }
                if ("top_k" in data && data.top_k != undefined) {
                    this.top_k = data.top_k;
                }
                if ("query_vector" in data && data.query_vector != undefined) {
                    this.query_vector = data.query_vector;
                }
                if ("metadata_fields" in data && data.metadata_fields != undefined) {
                    this.metadata_fields = data.metadata_fields;
                }
            }
        }
        get index_name() {
            return pb_1.Message.getFieldWithDefault(this, 1, "");
        }
        set index_name(value) {
            pb_1.Message.setField(this, 1, value);
        }
        get top_k() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0);
        }
        set top_k(value) {
            pb_1.Message.setField(this, 2, value);
        }
        get query_vector() {
            return pb_1.Message.getWrapperField(this, _Vector, 3);
        }
        set query_vector(value) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get has_query_vector() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get metadata_fields() {
            return pb_1.Message.getWrapperField(this, _MetadataRequest, 4);
        }
        set metadata_fields(value) {
            pb_1.Message.setWrapperField(this, 4, value);
        }
        get has_metadata_fields() {
            return pb_1.Message.getField(this, 4) != null;
        }
        static fromObject(data) {
            const message = new _SearchRequest({});
            if (data.index_name != null) {
                message.index_name = data.index_name;
            }
            if (data.top_k != null) {
                message.top_k = data.top_k;
            }
            if (data.query_vector != null) {
                message.query_vector = _Vector.fromObject(data.query_vector);
            }
            if (data.metadata_fields != null) {
                message.metadata_fields = _MetadataRequest.fromObject(data.metadata_fields);
            }
            return message;
        }
        toObject() {
            const data = {};
            if (this.index_name != null) {
                data.index_name = this.index_name;
            }
            if (this.top_k != null) {
                data.top_k = this.top_k;
            }
            if (this.query_vector != null) {
                data.query_vector = this.query_vector.toObject();
            }
            if (this.metadata_fields != null) {
                data.metadata_fields = this.metadata_fields.toObject();
            }
            return data;
        }
        serialize(w) {
            const writer = w || new pb_1.BinaryWriter();
            if (this.index_name.length)
                writer.writeString(1, this.index_name);
            if (this.top_k != 0)
                writer.writeUint32(2, this.top_k);
            if (this.has_query_vector)
                writer.writeMessage(3, this.query_vector, () => this.query_vector.serialize(writer));
            if (this.has_metadata_fields)
                writer.writeMessage(4, this.metadata_fields, () => this.metadata_fields.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes) {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new _SearchRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.index_name = reader.readString();
                        break;
                    case 2:
                        message.top_k = reader.readUint32();
                        break;
                    case 3:
                        reader.readMessage(message.query_vector, () => message.query_vector = _Vector.deserialize(reader));
                        break;
                    case 4:
                        reader.readMessage(message.metadata_fields, () => message.metadata_fields = _MetadataRequest.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary() {
            return this.serialize();
        }
        static deserializeBinary(bytes) {
            return _SearchRequest.deserialize(bytes);
        }
    }
    __SearchRequest_one_of_decls = new WeakMap();
    vectorindex._SearchRequest = _SearchRequest;
    class _SearchHit extends pb_1.Message {
        constructor(data) {
            super();
            __SearchHit_one_of_decls.set(this, []);
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [3], __classPrivateFieldGet(this, __SearchHit_one_of_decls, "f"));
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
                if ("distance" in data && data.distance != undefined) {
                    this.distance = data.distance;
                }
                if ("metadata" in data && data.metadata != undefined) {
                    this.metadata = data.metadata;
                }
            }
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "");
        }
        set id(value) {
            pb_1.Message.setField(this, 1, value);
        }
        get distance() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0);
        }
        set distance(value) {
            pb_1.Message.setField(this, 2, value);
        }
        get metadata() {
            return pb_1.Message.getRepeatedWrapperField(this, _Metadata, 3);
        }
        set metadata(value) {
            pb_1.Message.setRepeatedWrapperField(this, 3, value);
        }
        static fromObject(data) {
            const message = new _SearchHit({});
            if (data.id != null) {
                message.id = data.id;
            }
            if (data.distance != null) {
                message.distance = data.distance;
            }
            if (data.metadata != null) {
                message.metadata = data.metadata.map(item => _Metadata.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data = {};
            if (this.id != null) {
                data.id = this.id;
            }
            if (this.distance != null) {
                data.distance = this.distance;
            }
            if (this.metadata != null) {
                data.metadata = this.metadata.map((item) => item.toObject());
            }
            return data;
        }
        serialize(w) {
            const writer = w || new pb_1.BinaryWriter();
            if (this.id.length)
                writer.writeString(1, this.id);
            if (this.distance != 0)
                writer.writeFloat(2, this.distance);
            if (this.metadata.length)
                writer.writeRepeatedMessage(3, this.metadata, (item) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes) {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new _SearchHit();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id = reader.readString();
                        break;
                    case 2:
                        message.distance = reader.readFloat();
                        break;
                    case 3:
                        reader.readMessage(message.metadata, () => pb_1.Message.addToRepeatedWrapperField(message, 3, _Metadata.deserialize(reader), _Metadata));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary() {
            return this.serialize();
        }
        static deserializeBinary(bytes) {
            return _SearchHit.deserialize(bytes);
        }
    }
    __SearchHit_one_of_decls = new WeakMap();
    vectorindex._SearchHit = _SearchHit;
    class _SearchResponse extends pb_1.Message {
        constructor(data) {
            super();
            __SearchResponse_one_of_decls.set(this, []);
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], __classPrivateFieldGet(this, __SearchResponse_one_of_decls, "f"));
            if (!Array.isArray(data) && typeof data == "object") {
                if ("hits" in data && data.hits != undefined) {
                    this.hits = data.hits;
                }
            }
        }
        get hits() {
            return pb_1.Message.getRepeatedWrapperField(this, _SearchHit, 1);
        }
        set hits(value) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        static fromObject(data) {
            const message = new _SearchResponse({});
            if (data.hits != null) {
                message.hits = data.hits.map(item => _SearchHit.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data = {};
            if (this.hits != null) {
                data.hits = this.hits.map((item) => item.toObject());
            }
            return data;
        }
        serialize(w) {
            const writer = w || new pb_1.BinaryWriter();
            if (this.hits.length)
                writer.writeRepeatedMessage(1, this.hits, (item) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes) {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new _SearchResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.hits, () => pb_1.Message.addToRepeatedWrapperField(message, 1, _SearchHit.deserialize(reader), _SearchHit));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary() {
            return this.serialize();
        }
        static deserializeBinary(bytes) {
            return _SearchResponse.deserialize(bytes);
        }
    }
    __SearchResponse_one_of_decls = new WeakMap();
    vectorindex._SearchResponse = _SearchResponse;
    class UnimplementedVectorIndexService {
    }
    UnimplementedVectorIndexService.definition = {
        UpsertItemBatch: {
            path: "/vectorindex.VectorIndex/UpsertItemBatch",
            requestStream: false,
            responseStream: false,
            requestSerialize: (message) => Buffer.from(message.serialize()),
            requestDeserialize: (bytes) => _UpsertItemBatchRequest.deserialize(new Uint8Array(bytes)),
            responseSerialize: (message) => Buffer.from(message.serialize()),
            responseDeserialize: (bytes) => _UpsertItemBatchResponse.deserialize(new Uint8Array(bytes))
        },
        Search: {
            path: "/vectorindex.VectorIndex/Search",
            requestStream: false,
            responseStream: false,
            requestSerialize: (message) => Buffer.from(message.serialize()),
            requestDeserialize: (bytes) => _SearchRequest.deserialize(new Uint8Array(bytes)),
            responseSerialize: (message) => Buffer.from(message.serialize()),
            responseDeserialize: (bytes) => _SearchResponse.deserialize(new Uint8Array(bytes))
        }
    };
    vectorindex.UnimplementedVectorIndexService = UnimplementedVectorIndexService;
    class VectorIndexClient extends grpc_1.makeGenericClientConstructor(UnimplementedVectorIndexService.definition, "VectorIndex", {}) {
        constructor(address, credentials, options) {
            super(address, credentials, options);
            this.UpsertItemBatch = (message, metadata, options, callback) => {
                return super.UpsertItemBatch(message, metadata, options, callback);
            };
            this.Search = (message, metadata, options, callback) => {
                return super.Search(message, metadata, options, callback);
            };
        }
    }
    vectorindex.VectorIndexClient = VectorIndexClient;
})(vectorindex = exports.vectorindex || (exports.vectorindex = {}));
