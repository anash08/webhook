"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SimpleCacheClient = exports.CacheClient = void 0;
const control_client_1 = require("./internal/control-client");
const data_client_1 = require("./internal/data-client");
const utils_1 = require("@gomomento/sdk-core/dist/src/internal/utils");
const AbstractCacheClient_1 = require("@gomomento/sdk-core/dist/src/internal/clients/cache/AbstractCacheClient");
const EAGER_CONNECITON_DEFAULT_TIMEOUT_SECONDS = 30;
/**
 * Momento Cache Client.
 *
 * Features include:
 * - Get, set, and delete data
 * - Create, delete, and list caches
 * - Create, revoke, and list signing keys
 */
class CacheClient extends AbstractCacheClient_1.AbstractCacheClient {
    /**
     * Creates an instance of CacheClient.
     * @param {CacheClientProps} props configuration and credentials for creating a CacheClient.
     */
    constructor(props) {
        const controlClient = new control_client_1.ControlClient({
            configuration: props.configuration,
            credentialProvider: props.credentialProvider,
        });
        const numClients = props.configuration
            .getTransportStrategy()
            .getGrpcConfig()
            .getNumClients();
        const dataClients = (0, utils_1.range)(numClients).map((_, id) => new data_client_1.DataClient(props, String(id)));
        super(controlClient, dataClients);
        this.notYetAbstractedControlClient = controlClient;
        this.logger = props.configuration.getLoggerFactory().getLogger(this);
        this.logger.info('Creating Momento CacheClient');
    }
    /**
     * Creates a new instance of CacheClient. If eagerConnectTimeout is present in the given props, the client will
     * eagerly create its connection to Momento. It will wait until the connection is established, or until the timout
     * runs out. It the timeout runs out, the client will be valid to use, but it may still be connecting in the background.
     * @param {EagerCacheClientProps} props configuration and credentials for creating a CacheClient.
     */
    static async create(props) {
        const client = new CacheClient(props);
        const timeout = props.eagerConnectTimeout !== undefined
            ? props.eagerConnectTimeout
            : EAGER_CONNECITON_DEFAULT_TIMEOUT_SECONDS;
        // client need to explicitly set the value as 0 to disable eager connection.
        if (props.eagerConnectTimeout !== 0) {
            await Promise.all(client.dataClients.map(dc => dc.connect(timeout)));
        }
        return client;
    }
    /**
     * Flushes / clears all the items of the given cache
     *
     * @param {string} cacheName - The cache to be flushed.
     * @returns {Promise<CacheFlush.Response>} -
     * {@link CacheFlush.Success} on success.
     * {@link CacheFlush.Error} on failure.
     */
    async flushCache(cacheName) {
        return await this.notYetAbstractedControlClient.flushCache(cacheName);
    }
    /**
     * Creates a Momento signing key.
     *
     * @param {number} ttlMinutes - The time to live in minutes until the Momento
     * signing key expires.
     * @returns {Promise<CreateSigningKey.Response>} -
     * {@link CreateSigningKey.Success} containing the key, key ID, endpoint, and
     * expiration date on success.
     * {@link CreateSigningKey.Error} on failure.
     */
    async createSigningKey(ttlMinutes) {
        const client = this.getNextDataClient();
        return await this.notYetAbstractedControlClient.createSigningKey(ttlMinutes, client.getEndpoint());
    }
    /**
     * Revokes a Momento signing key.
     *
     * @remarks
     * All tokens signed by this key will be invalid.
     *
     * @param {string} keyId - The ID of the key to revoke.
     * @returns {Promise<RevokeSigningKey.Response>} -
     * {@link RevokeSigningKey.Success} on success.
     * {@link RevokeSigningKey.Error} on failure.
     */
    async revokeSigningKey(keyId) {
        return await this.notYetAbstractedControlClient.revokeSigningKey(keyId);
    }
    /**
     * Lists all Momento signing keys for the provided auth token.
     *
     * @returns {Promise<ListSigningKeys.Response>} -
     * {@link ListSigningKeys.Success} containing the keys on success.
     * {@link ListSigningKeys.Error} on failure.
     */
    async listSigningKeys() {
        const client = this.getNextDataClient();
        return await this.notYetAbstractedControlClient.listSigningKeys(client.getEndpoint());
    }
    getNextDataClient() {
        const client = this.dataClients[this.nextDataClientIndex];
        this.nextDataClientIndex =
            (this.nextDataClientIndex + 1) % this.dataClients.length;
        return client;
    }
}
exports.CacheClient = CacheClient;
/**
 * @deprecated use {CacheClient} instead
 */
class SimpleCacheClient extends CacheClient {
}
exports.SimpleCacheClient = SimpleCacheClient;
//# sourceMappingURL=data:application/json;base64,