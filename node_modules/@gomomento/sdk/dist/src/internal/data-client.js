"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.DataClient = exports.CONNECTION_ID_KEY = void 0;
const generated_types_1 = require("@gomomento/generated-types");
// older versions of node don't have the global util variables https://github.com/nodejs/node/issues/20365
const util_1 = require("util");
const headers_interceptor_1 = require("./grpc/headers-interceptor");
const client_timeout_interceptor_1 = require("./grpc/client-timeout-interceptor");
const retry_interceptor_1 = require("./grpc/retry-interceptor");
const cache_service_error_mapper_1 = require("../errors/cache-service-error-mapper");
const grpc_js_1 = require("@grpc/grpc-js");
const __1 = require("..");
const package_json_1 = require("../../package.json");
const idle_grpc_client_wrapper_1 = require("./grpc/idle-grpc-client-wrapper");
const middlewares_interceptor_1 = require("./grpc/middlewares-interceptor");
const cacheclient_1 = require("@gomomento/generated-types/dist/cacheclient");
const utils_1 = require("@gomomento/sdk-core/dist/src/internal/utils");
const grpc_response_types_1 = require("@gomomento/sdk-core/dist/src/messages/responses/grpc-response-types");
const errors_1 = require("@gomomento/sdk-core/dist/src/errors");
var grpcCache = generated_types_1.cache.cache_client;
var _Unbounded = cacheclient_1.cache_client._Unbounded;
var ECacheResult = cacheclient_1.cache_client.ECacheResult;
var _ItemGetTypeResponse = cacheclient_1.cache_client._ItemGetTypeResponse;
const connectivity_state_1 = require("@grpc/grpc-js/build/src/connectivity-state");
exports.CONNECTION_ID_KEY = Symbol('connectionID');
class DataClient {
    /**
     * @param {CacheClientProps} props
     * @param dataClientID
     */
    constructor(props, dataClientID) {
        this.configuration = props.configuration;
        this.credentialProvider = props.credentialProvider;
        this.logger = this.configuration.getLoggerFactory().getLogger(this);
        const grpcConfig = this.configuration
            .getTransportStrategy()
            .getGrpcConfig();
        this.requestTimeoutMs =
            grpcConfig.getDeadlineMillis() || DataClient.DEFAULT_REQUEST_TIMEOUT_MS;
        this.validateRequestTimeout(this.requestTimeoutMs);
        this.logger.debug(`Creating cache client using endpoint: '${this.credentialProvider.getCacheEndpoint()}'`);
        this.clientWrapper = new idle_grpc_client_wrapper_1.IdleGrpcClientWrapper({
            clientFactoryFn: () => new grpcCache.ScsClient(this.credentialProvider.getCacheEndpoint(), grpc_js_1.ChannelCredentials.createSsl(), {
                // default value for max session memory is 10mb.  Under high load, it is easy to exceed this,
                // after which point all requests will fail with a client-side RESOURCE_EXHAUSTED exception.
                'grpc-node.max_session_memory': grpcConfig.getMaxSessionMemoryMb(),
                // This flag controls whether channels use a shared global pool of subchannels, or whether
                // each channel gets its own subchannel pool.  The default value is 0, meaning a single global
                // pool.  Setting it to 1 provides significant performance improvements when we instantiate more
                // than one grpc client.
                'grpc.use_local_subchannel_pool': 1,
                // The following settings are based on https://github.com/grpc/grpc/blob/e35db43c07f27cc13ec061520da1ed185f36abd4/doc/keepalive.md ,
                // and guidance provided on various github issues for grpc-node. They will enable keepalive pings when a
                // client connection is idle.
                'grpc.keepalive_permit_without_calls': 1,
                'grpc.keepalive_timeout_ms': 1000,
                'grpc.keepalive_time_ms': 5000,
            }),
            loggerFactory: this.configuration.getLoggerFactory(),
            maxIdleMillis: this.configuration
                .getTransportStrategy()
                .getMaxIdleMillis(),
        });
        this.textEncoder = new util_1.TextEncoder();
        this.defaultTtlSeconds = props.defaultTtlSeconds;
        // this context object is currently internal only but can be extended in the Configuration object is we wants clients
        // to be able to set it.
        const context = {};
        context[exports.CONNECTION_ID_KEY] = dataClientID;
        this.interceptors = this.initializeInterceptors(this.configuration.getLoggerFactory(), this.configuration.getMiddlewares(), context);
    }
    connect(timeoutSeconds = 10) {
        const deadline = new Date();
        deadline.setSeconds(deadline.getSeconds() + timeoutSeconds);
        return this.connectWithinDeadline(deadline);
    }
    connectWithinDeadline(deadline) {
        return new Promise((resolve, reject) => {
            // Get the current state and initiate a connection
            const currentState = this.clientWrapper
                .getClient()
                .getChannel()
                .getConnectivityState(true);
            this.logger.debug(`Client connectivity state: ${currentState}`);
            if (currentState === connectivity_state_1.ConnectivityState.READY) {
                resolve();
                return;
            }
            const now = new Date();
            if (now >= deadline) {
                this.logger.error('Unable to connect to Momento: deadline exceeded.');
                resolve();
                return;
            }
            this.clientWrapper
                .getClient()
                .getChannel()
                .watchConnectivityState(currentState, deadline, (error) => {
                if (error) {
                    this.logger.error(`Unable to connect to Momento: ${error.name}. Please contact Momento if this persists.`);
                    resolve();
                    return;
                }
                const newState = this.clientWrapper
                    .getClient()
                    .getChannel()
                    .getConnectivityState(false);
                if (newState === connectivity_state_1.ConnectivityState.READY) {
                    this.logger.debug(`Connected! Current state: ${newState}`);
                    resolve();
                }
                else if (newState === connectivity_state_1.ConnectivityState.CONNECTING) {
                    // The connection goes through the CONNECTING state before becoming READY,
                    // so we must watch it twice.
                    this.connectWithinDeadline(deadline).then(resolve).catch(reject);
                }
                else {
                    this.logger.error(`Unable to connect to Momento: Unexpected connection state: ${newState}. Please contact Momento if this persists.`);
                    resolve();
                }
            });
        });
    }
    getEndpoint() {
        const endpoint = this.credentialProvider.getCacheEndpoint();
        this.logger.debug(`Using cache endpoint: ${endpoint}`);
        return endpoint;
    }
    validateRequestTimeout(timeout) {
        this.logger.debug(`Request timeout ms: ${String(timeout)}`);
        if (timeout && timeout <= 0) {
            throw new __1.InvalidArgumentError('request timeout must be greater than zero.');
        }
    }
    convertECacheResult(result) {
        switch (result) {
            case grpcCache.ECacheResult.Hit:
                return grpc_response_types_1._ECacheResult.Hit;
            case grpcCache.ECacheResult.Invalid:
                return grpc_response_types_1._ECacheResult.Invalid;
            case grpcCache.ECacheResult.Miss:
                return grpc_response_types_1._ECacheResult.Miss;
            case grpcCache.ECacheResult.Ok:
                return grpc_response_types_1._ECacheResult.Ok;
        }
    }
    convertItemTypeResult(result) {
        switch (result) {
            case _ItemGetTypeResponse.ItemType.SCALAR:
                return __1.ItemType.SCALAR;
            case _ItemGetTypeResponse.ItemType.LIST:
                return __1.ItemType.LIST;
            case _ItemGetTypeResponse.ItemType.DICTIONARY:
                return __1.ItemType.DICTIONARY;
            case _ItemGetTypeResponse.ItemType.SET:
                return __1.ItemType.SET;
            case _ItemGetTypeResponse.ItemType.SORTED_SET:
                return __1.ItemType.SORTED_SET;
        }
    }
    async set(cacheName, key, value, ttl) {
        try {
            (0, utils_1.validateCacheName)(cacheName);
        }
        catch (err) {
            return new __1.CacheSet.Error((0, errors_1.normalizeSdkError)(err));
        }
        if (ttl && ttl < 0) {
            return new __1.CacheSet.Error(new __1.InvalidArgumentError('ttl must be a positive integer'));
        }
        const ttlToUse = ttl || this.defaultTtlSeconds;
        this.logger.trace(`Issuing 'set' request; key: ${key.toString()}, value length: ${value.length}, ttl: ${ttlToUse.toString()}`);
        const encodedKey = this.convert(key);
        const encodedValue = this.convert(value);
        return await this.sendSet(cacheName, encodedKey, encodedValue, ttlToUse);
    }
    async sendSet(cacheName, key, value, ttl) {
        const request = new grpcCache._SetRequest({
            cache_body: value,
            cache_key: key,
            ttl_milliseconds: ttl * 1000,
        });
        const metadata = this.createMetadata(cacheName);
        return await new Promise(resolve => {
            this.clientWrapper.getClient().Set(request, metadata, {
                interceptors: this.interceptors,
            }, (err, resp) => {
                if (resp) {
                    resolve(new __1.CacheSet.Success());
                }
                else {
                    resolve(new __1.CacheSet.Error((0, cache_service_error_mapper_1.cacheServiceErrorMapper)(err)));
                }
            });
        });
    }
    async setFetch(cacheName, setName) {
        try {
            (0, utils_1.validateCacheName)(cacheName);
            (0, utils_1.validateSetName)(setName);
        }
        catch (err) {
            return new __1.CacheSetFetch.Error((0, errors_1.normalizeSdkError)(err));
        }
        return await this.sendSetFetch(cacheName, this.convert(setName));
    }
    async sendSetFetch(cacheName, setName) {
        const request = new grpcCache._SetFetchRequest({
            set_name: setName,
        });
        const metadata = this.createMetadata(cacheName);
        return await new Promise(resolve => {
            this.clientWrapper.getClient().SetFetch(request, metadata, {
                interceptors: this.interceptors,
            }, (err, resp) => {
                if (resp === null || resp === void 0 ? void 0 : resp.missing) {
                    resolve(new __1.CacheSetFetch.Miss());
                }
                else if (resp === null || resp === void 0 ? void 0 : resp.found) {
                    resolve(new __1.CacheSetFetch.Hit(resp.found.elements));
                }
                else {
                    resolve(new __1.CacheSetFetch.Error((0, cache_service_error_mapper_1.cacheServiceErrorMapper)(err)));
                }
            });
        });
    }
    async setAddElements(cacheName, setName, elements, ttl = __1.CollectionTtl.fromCacheTtl()) {
        try {
            (0, utils_1.validateCacheName)(cacheName);
            (0, utils_1.validateSetName)(setName);
        }
        catch (err) {
            return new __1.CacheSetAddElements.Error((0, errors_1.normalizeSdkError)(err));
        }
        return await this.sendSetAddElements(cacheName, this.convert(setName), this.convertArray(elements), ttl.ttlMilliseconds() || this.defaultTtlSeconds * 1000, ttl.refreshTtl());
    }
    async sendSetAddElements(cacheName, setName, elements, ttlMilliseconds, refreshTtl) {
        const request = new grpcCache._SetUnionRequest({
            set_name: setName,
            elements: elements,
            ttl_milliseconds: ttlMilliseconds,
            refresh_ttl: refreshTtl,
        });
        const metadata = this.createMetadata(cacheName);
        return await new Promise(resolve => {
            this.clientWrapper.getClient().SetUnion(request, metadata, {
                interceptors: this.interceptors,
            }, err => {
                if (err) {
                    resolve(new __1.CacheSetAddElements.Error((0, cache_service_error_mapper_1.cacheServiceErrorMapper)(err)));
                }
                else {
                    resolve(new __1.CacheSetAddElements.Success());
                }
            });
        });
    }
    async setRemoveElements(cacheName, setName, elements) {
        try {
            (0, utils_1.validateCacheName)(cacheName);
            (0, utils_1.validateSetName)(setName);
        }
        catch (err) {
            return new __1.CacheSetRemoveElements.Error((0, errors_1.normalizeSdkError)(err));
        }
        return await this.sendSetRemoveElements(cacheName, this.convert(setName), this.convertArray(elements));
    }
    async sendSetRemoveElements(cacheName, setName, elements) {
        const subtrahend = new grpcCache._SetDifferenceRequest._Subtrahend({
            set: new grpcCache._SetDifferenceRequest._Subtrahend._Set({
                elements: elements,
            }),
        });
        const request = new grpcCache._SetDifferenceRequest({
            set_name: setName,
            subtrahend: subtrahend,
        });
        const metadata = this.createMetadata(cacheName);
        return await new Promise(resolve => {
            this.clientWrapper.getClient().SetDifference(request, metadata, {
                interceptors: this.interceptors,
            }, err => {
                if (err) {
                    resolve(new __1.CacheSetRemoveElements.Error((0, cache_service_error_mapper_1.cacheServiceErrorMapper)(err)));
                }
                else {
                    resolve(new __1.CacheSetRemoveElements.Success());
                }
            });
        });
    }
    async setIfNotExists(cacheName, key, value, ttl) {
        var _a;
        try {
            (0, utils_1.validateCacheName)(cacheName);
        }
        catch (err) {
            return new __1.CacheSetIfNotExists.Error((0, errors_1.normalizeSdkError)(err));
        }
        if (ttl && ttl < 0) {
            return new __1.CacheSetIfNotExists.Error(new __1.InvalidArgumentError('ttl must be a positive integer'));
        }
        this.logger.trace(`Issuing 'setIfNotExists' request; key: ${key.toString()}, field: ${value.toString()}, ttl: ${(_a = ttl === null || ttl === void 0 ? void 0 : ttl.toString()) !== null && _a !== void 0 ? _a : 'null'}`);
        const result = await this.sendSetIfNotExists(cacheName, this.convert(key), this.convert(value), ttl || this.defaultTtlSeconds * 1000);
        this.logger.trace(`'setIfNotExists' request result: ${result.toString()}`);
        return result;
    }
    async sendSetIfNotExists(cacheName, key, value, ttlMilliseconds) {
        const request = new grpcCache._SetIfNotExistsRequest({
            cache_key: key,
            cache_body: value,
            ttl_milliseconds: ttlMilliseconds,
        });
        const metadata = this.createMetadata(cacheName);
        return await new Promise(resolve => {
            this.clientWrapper.getClient().SetIfNotExists(request, metadata, {
                interceptors: this.interceptors,
            }, (err, resp) => {
                if (resp) {
                    switch (resp.result) {
                        case 'stored':
                            resolve(new __1.CacheSetIfNotExists.Stored());
                            break;
                        case 'not_stored':
                            resolve(new __1.CacheSetIfNotExists.NotStored());
                            break;
                        default:
                            resolve(new __1.CacheGet.Error(new __1.UnknownError('SetIfNotExists responded with an unknown result')));
                            break;
                    }
                }
                else {
                    resolve(new __1.CacheSetIfNotExists.Error((0, cache_service_error_mapper_1.cacheServiceErrorMapper)(err)));
                }
            });
        });
    }
    async delete(cacheName, key) {
        try {
            (0, utils_1.validateCacheName)(cacheName);
        }
        catch (err) {
            return new __1.CacheDelete.Error((0, errors_1.normalizeSdkError)(err));
        }
        this.logger.trace(`Issuing 'delete' request; key: ${key.toString()}`);
        return await this.sendDelete(cacheName, this.convert(key));
    }
    async sendDelete(cacheName, key) {
        const request = new grpcCache._DeleteRequest({
            cache_key: key,
        });
        const metadata = this.createMetadata(cacheName);
        return await new Promise(resolve => {
            this.clientWrapper.getClient().Delete(request, metadata, {
                interceptors: this.interceptors,
            }, (err, resp) => {
                if (resp) {
                    resolve(new __1.CacheDelete.Success());
                }
                else {
                    resolve(new __1.CacheDelete.Error((0, cache_service_error_mapper_1.cacheServiceErrorMapper)(err)));
                }
            });
        });
    }
    async get(cacheName, key) {
        try {
            (0, utils_1.validateCacheName)(cacheName);
        }
        catch (err) {
            return new __1.CacheGet.Error((0, errors_1.normalizeSdkError)(err));
        }
        this.logger.trace(`Issuing 'get' request; key: ${key.toString()}`);
        const result = await this.sendGet(cacheName, this.convert(key));
        this.logger.trace(`'get' request result: ${result.toString()}`);
        return result;
    }
    async sendGet(cacheName, key) {
        const request = new grpcCache._GetRequest({
            cache_key: key,
        });
        const metadata = this.createMetadata(cacheName);
        return await new Promise(resolve => {
            this.clientWrapper.getClient().Get(request, metadata, {
                interceptors: this.interceptors,
            }, (err, resp) => {
                if (resp) {
                    switch (resp.result) {
                        case grpcCache.ECacheResult.Miss:
                            resolve(new __1.CacheGet.Miss());
                            break;
                        case grpcCache.ECacheResult.Hit:
                            resolve(new __1.CacheGet.Hit(resp.cache_body));
                            break;
                        case grpcCache.ECacheResult.Invalid:
                        case grpcCache.ECacheResult.Ok:
                            resolve(new __1.CacheGet.Error(new __1.UnknownError(resp.message)));
                            break;
                        default:
                            resolve(new __1.CacheGet.Error(new __1.UnknownError('An unknown error occurred: ' + resp.message)));
                            break;
                    }
                }
                else {
                    resolve(new __1.CacheGet.Error((0, cache_service_error_mapper_1.cacheServiceErrorMapper)(err)));
                }
            });
        });
    }
    async listConcatenateBack(cacheName, listName, values, truncateFrontToSize, ttl = __1.CollectionTtl.fromCacheTtl()) {
        var _a;
        try {
            (0, utils_1.validateCacheName)(cacheName);
            (0, utils_1.validateListName)(listName);
        }
        catch (err) {
            return new __1.CacheListConcatenateBack.Error((0, errors_1.normalizeSdkError)(err));
        }
        this.logger.trace(`Issuing 'listConcatenateBack' request; listName: ${listName}, values length: ${values.length}, ${ttl.toString()}, truncateFrontToSize: ${(_a = truncateFrontToSize === null || truncateFrontToSize === void 0 ? void 0 : truncateFrontToSize.toString()) !== null && _a !== void 0 ? _a : 'null'}`);
        const result = await this.sendListConcatenateBack(cacheName, this.convert(listName), this.convertArray(values), ttl.ttlMilliseconds() || this.defaultTtlSeconds * 1000, ttl.refreshTtl(), truncateFrontToSize);
        this.logger.trace(`'listConcatenateBack' request result: ${result.toString()}`);
        return result;
    }
    async sendListConcatenateBack(cacheName, listName, values, ttlMilliseconds, refreshTtl, truncateFrontToSize) {
        const request = new grpcCache._ListConcatenateBackRequest({
            list_name: listName,
            values: values,
            ttl_milliseconds: ttlMilliseconds,
            refresh_ttl: refreshTtl,
            truncate_front_to_size: truncateFrontToSize,
        });
        const metadata = this.createMetadata(cacheName);
        return await new Promise(resolve => {
            this.clientWrapper.getClient().ListConcatenateBack(request, metadata, {
                interceptors: this.interceptors,
            }, (err, resp) => {
                if (resp) {
                    resolve(new __1.CacheListConcatenateBack.Success(resp.list_length));
                }
                else {
                    resolve(new __1.CacheListConcatenateBack.Error((0, cache_service_error_mapper_1.cacheServiceErrorMapper)(err)));
                }
            });
        });
    }
    async listConcatenateFront(cacheName, listName, values, truncateBackToSize, ttl = __1.CollectionTtl.fromCacheTtl()) {
        var _a;
        try {
            (0, utils_1.validateCacheName)(cacheName);
            (0, utils_1.validateListName)(listName);
        }
        catch (err) {
            return new __1.CacheListConcatenateFront.Error((0, errors_1.normalizeSdkError)(err));
        }
        this.logger.trace(`Issuing 'listConcatenateFront' request; listName: ${listName}, values length: ${values.length}, ${ttl.toString()}, truncateBackToSize: ${(_a = truncateBackToSize === null || truncateBackToSize === void 0 ? void 0 : truncateBackToSize.toString()) !== null && _a !== void 0 ? _a : 'null'}`);
        const result = await this.sendListConcatenateFront(cacheName, this.convert(listName), this.convertArray(values), ttl.ttlMilliseconds() || this.defaultTtlSeconds * 1000, ttl.refreshTtl(), truncateBackToSize);
        this.logger.trace(`'listConcatenateFront' request result: ${result.toString()}`);
        return result;
    }
    async sendListConcatenateFront(cacheName, listName, values, ttlMilliseconds, refreshTtl, truncateBackToSize) {
        const request = new grpcCache._ListConcatenateFrontRequest({
            list_name: listName,
            values: values,
            ttl_milliseconds: ttlMilliseconds,
            refresh_ttl: refreshTtl,
            truncate_back_to_size: truncateBackToSize,
        });
        const metadata = this.createMetadata(cacheName);
        return await new Promise(resolve => {
            this.clientWrapper.getClient().ListConcatenateFront(request, metadata, {
                interceptors: this.interceptors,
            }, (err, resp) => {
                if (resp) {
                    resolve(new __1.CacheListConcatenateFront.Success(resp.list_length));
                }
                else {
                    resolve(new __1.CacheListConcatenateFront.Error((0, cache_service_error_mapper_1.cacheServiceErrorMapper)(err)));
                }
            });
        });
    }
    async listFetch(cacheName, listName, startIndex, endIndex) {
        try {
            (0, utils_1.validateCacheName)(cacheName);
            (0, utils_1.validateListName)(listName);
            (0, utils_1.validateListSliceStartEnd)(startIndex, endIndex);
        }
        catch (err) {
            return new __1.CacheListFetch.Error((0, errors_1.normalizeSdkError)(err));
        }
        this.logger.trace("Issuing 'listFetch' request; listName: %s, startIndex: %s, endIndex: %s", listName, startIndex !== null && startIndex !== void 0 ? startIndex : 'null', endIndex !== null && endIndex !== void 0 ? endIndex : 'null');
        const result = await this.sendListFetch(cacheName, this.convert(listName), startIndex, endIndex);
        this.logger.trace("'listFetch' request result: %s", result.toString());
        return result;
    }
    async sendListFetch(cacheName, listName, start, end) {
        const request = new grpcCache._ListFetchRequest({
            list_name: listName,
        });
        if (start) {
            request.inclusive_start = start;
        }
        else {
            request.unbounded_start = new _Unbounded();
        }
        if (end) {
            request.exclusive_end = end;
        }
        else {
            request.unbounded_end = new _Unbounded();
        }
        const metadata = this.createMetadata(cacheName);
        return await new Promise(resolve => {
            this.clientWrapper.getClient().ListFetch(request, metadata, {
                interceptors: this.interceptors,
            }, (err, resp) => {
                if (resp === null || resp === void 0 ? void 0 : resp.missing) {
                    resolve(new __1.CacheListFetch.Miss());
                }
                else if (resp === null || resp === void 0 ? void 0 : resp.found) {
                    resolve(new __1.CacheListFetch.Hit(resp.found.values));
                }
                else {
                    resolve(new __1.CacheListFetch.Error((0, cache_service_error_mapper_1.cacheServiceErrorMapper)(err)));
                }
            });
        });
    }
    async listRetain(cacheName, listName, startIndex, endIndex, ttl = __1.CollectionTtl.fromCacheTtl()) {
        var _a;
        try {
            (0, utils_1.validateCacheName)(cacheName);
            (0, utils_1.validateListName)(listName);
            (0, utils_1.validateListSliceStartEnd)(startIndex, endIndex);
        }
        catch (err) {
            return new __1.CacheListRetain.Error((0, errors_1.normalizeSdkError)(err));
        }
        this.logger.trace("Issuing 'listRetain' request; listName: %s, startIndex: %s, endIndex: %s, ttl: %s", listName, startIndex !== null && startIndex !== void 0 ? startIndex : 'null', endIndex !== null && endIndex !== void 0 ? endIndex : 'null', (_a = ttl.ttlSeconds.toString()) !== null && _a !== void 0 ? _a : 'null');
        const result = await this.sendListRetain(cacheName, this.convert(listName), startIndex, endIndex, ttl.ttlMilliseconds() || this.defaultTtlSeconds * 1000, ttl.refreshTtl());
        this.logger.trace("'listRetain' request result: %s", result.toString());
        return result;
    }
    async sendListRetain(cacheName, listName, start, end, ttlMilliseconds, refreshTtl) {
        const request = new grpcCache._ListRetainRequest({
            list_name: listName,
            ttl_milliseconds: ttlMilliseconds,
            refresh_ttl: refreshTtl,
        });
        if (start) {
            request.inclusive_start = start;
        }
        else {
            request.unbounded_start = new _Unbounded();
        }
        if (end) {
            request.exclusive_end = end;
        }
        else {
            request.unbounded_end = new _Unbounded();
        }
        const metadata = this.createMetadata(cacheName);
        return await new Promise(resolve => {
            this.clientWrapper.getClient().ListRetain(request, metadata, {
                interceptors: this.interceptors,
            }, (err, resp) => {
                if (resp) {
                    resolve(new __1.CacheListRetain.Success());
                }
                else {
                    resolve(new __1.CacheListRetain.Error((0, cache_service_error_mapper_1.cacheServiceErrorMapper)(err)));
                }
            });
        });
    }
    async listLength(cacheName, listName) {
        try {
            (0, utils_1.validateCacheName)(cacheName);
            (0, utils_1.validateListName)(listName);
        }
        catch (err) {
            return new __1.CacheListLength.Error((0, errors_1.normalizeSdkError)(err));
        }
        this.logger.trace(`Issuing 'listLength' request; listName: ${listName}`);
        const result = await this.sendListLength(cacheName, this.convert(listName));
        this.logger.trace(`'listLength' request result: ${result.toString()}`);
        return result;
    }
    async sendListLength(cacheName, listName) {
        const request = new grpcCache._ListLengthRequest({
            list_name: listName,
        });
        const metadata = this.createMetadata(cacheName);
        return await new Promise(resolve => {
            this.clientWrapper.getClient().ListLength(request, metadata, {
                interceptors: this.interceptors,
            }, (err, resp) => {
                if (resp === null || resp === void 0 ? void 0 : resp.missing) {
                    resolve(new __1.CacheListLength.Miss());
                }
                else if (resp === null || resp === void 0 ? void 0 : resp.found) {
                    resolve(new __1.CacheListLength.Hit(resp.found.length));
                }
                else {
                    resolve(new __1.CacheListLength.Error((0, cache_service_error_mapper_1.cacheServiceErrorMapper)(err)));
                }
            });
        });
    }
    async listPopBack(cacheName, listName) {
        try {
            (0, utils_1.validateCacheName)(cacheName);
            (0, utils_1.validateListName)(listName);
        }
        catch (err) {
            return new __1.CacheListPopBack.Error((0, errors_1.normalizeSdkError)(err));
        }
        this.logger.trace("Issuing 'listPopBack' request");
        const result = await this.sendListPopBack(cacheName, this.convert(listName));
        this.logger.trace(`'listPopBack' request result: ${result.toString()}`);
        return result;
    }
    async sendListPopBack(cacheName, listName) {
        const request = new grpcCache._ListPopBackRequest({
            list_name: listName,
        });
        const metadata = this.createMetadata(cacheName);
        return await new Promise(resolve => {
            this.clientWrapper.getClient().ListPopBack(request, metadata, {
                interceptors: this.interceptors,
            }, (err, resp) => {
                if (resp === null || resp === void 0 ? void 0 : resp.missing) {
                    resolve(new __1.CacheListPopBack.Miss());
                }
                else if (resp === null || resp === void 0 ? void 0 : resp.found) {
                    resolve(new __1.CacheListPopBack.Hit(resp.found.back));
                }
                else {
                    resolve(new __1.CacheListPopBack.Error((0, cache_service_error_mapper_1.cacheServiceErrorMapper)(err)));
                }
            });
        });
    }
    async listPopFront(cacheName, listName) {
        try {
            (0, utils_1.validateCacheName)(cacheName);
            (0, utils_1.validateListName)(listName);
        }
        catch (err) {
            return new __1.CacheListPopFront.Error((0, errors_1.normalizeSdkError)(err));
        }
        this.logger.trace("Issuing 'listPopFront' request");
        const result = await this.sendListPopFront(cacheName, this.convert(listName));
        this.logger.trace(`'listPopFront' request result: ${result.toString()}`);
        return result;
    }
    async sendListPopFront(cacheName, listName) {
        const request = new grpcCache._ListPopFrontRequest({
            list_name: listName,
        });
        const metadata = this.createMetadata(cacheName);
        return await new Promise(resolve => {
            this.clientWrapper.getClient().ListPopFront(request, metadata, {
                interceptors: this.interceptors,
            }, (err, resp) => {
                if (resp === null || resp === void 0 ? void 0 : resp.missing) {
                    resolve(new __1.CacheListPopFront.Miss());
                }
                else if (resp === null || resp === void 0 ? void 0 : resp.found) {
                    resolve(new __1.CacheListPopFront.Hit(resp.found.front));
                }
                else {
                    resolve(new __1.CacheListPopFront.Error((0, cache_service_error_mapper_1.cacheServiceErrorMapper)(err)));
                }
            });
        });
    }
    async listPushBack(cacheName, listName, value, truncateFrontToSize, ttl = __1.CollectionTtl.fromCacheTtl()) {
        var _a;
        try {
            (0, utils_1.validateCacheName)(cacheName);
            (0, utils_1.validateListName)(listName);
        }
        catch (err) {
            return new __1.CacheListPushBack.Error((0, errors_1.normalizeSdkError)(err));
        }
        this.logger.trace(`Issuing 'listPushBack' request; listName: ${listName}, value length: ${value.length}, ${ttl.toString()}, truncateFrontToSize: ${(_a = truncateFrontToSize === null || truncateFrontToSize === void 0 ? void 0 : truncateFrontToSize.toString()) !== null && _a !== void 0 ? _a : 'null'}`);
        const result = await this.sendListPushBack(cacheName, this.convert(listName), this.convert(value), ttl.ttlMilliseconds() || this.defaultTtlSeconds * 1000, ttl.refreshTtl(), truncateFrontToSize);
        this.logger.trace(`'listPushBack' request result: ${result.toString()}`);
        return result;
    }
    async sendListPushBack(cacheName, listName, value, ttlMilliseconds, refreshTtl, truncateFrontToSize) {
        const request = new grpcCache._ListPushBackRequest({
            list_name: listName,
            value: value,
            ttl_milliseconds: ttlMilliseconds,
            refresh_ttl: refreshTtl,
            truncate_front_to_size: truncateFrontToSize,
        });
        const metadata = this.createMetadata(cacheName);
        return await new Promise(resolve => {
            this.clientWrapper.getClient().ListPushBack(request, metadata, {
                interceptors: this.interceptors,
            }, (err, resp) => {
                if (resp) {
                    resolve(new __1.CacheListPushBack.Success(resp.list_length));
                }
                else {
                    resolve(new __1.CacheListPushBack.Error((0, cache_service_error_mapper_1.cacheServiceErrorMapper)(err)));
                }
            });
        });
    }
    async listPushFront(cacheName, listName, value, truncateBackToSize, ttl = __1.CollectionTtl.fromCacheTtl()) {
        var _a;
        try {
            (0, utils_1.validateCacheName)(cacheName);
            (0, utils_1.validateListName)(listName);
        }
        catch (err) {
            return new __1.CacheListPushFront.Error((0, errors_1.normalizeSdkError)(err));
        }
        this.logger.trace(`Issuing 'listPushFront' request; listName: ${listName}, value length: ${value.length}, ${ttl.toString()}, truncateBackToSize: ${(_a = truncateBackToSize === null || truncateBackToSize === void 0 ? void 0 : truncateBackToSize.toString()) !== null && _a !== void 0 ? _a : 'null'}`);
        const result = await this.sendListPushFront(cacheName, this.convert(listName), this.convert(value), ttl.ttlMilliseconds() || this.defaultTtlSeconds * 1000, ttl.refreshTtl(), truncateBackToSize);
        this.logger.trace(`'listPushFront' request result: ${result.toString()}`);
        return result;
    }
    async sendListPushFront(cacheName, listName, value, ttlMilliseconds, refreshTtl, truncateBackToSize) {
        const request = new grpcCache._ListPushFrontRequest({
            list_name: listName,
            value: value,
            ttl_milliseconds: ttlMilliseconds,
            refresh_ttl: refreshTtl,
            truncate_back_to_size: truncateBackToSize,
        });
        const metadata = this.createMetadata(cacheName);
        return await new Promise(resolve => {
            this.clientWrapper.getClient().ListPushFront(request, metadata, {
                interceptors: this.interceptors,
            }, (err, resp) => {
                if (resp) {
                    resolve(new __1.CacheListPushFront.Success(resp.list_length));
                }
                else {
                    resolve(new __1.CacheListPushFront.Error((0, cache_service_error_mapper_1.cacheServiceErrorMapper)(err)));
                }
            });
        });
    }
    async listRemoveValue(cacheName, listName, value) {
        try {
            (0, utils_1.validateCacheName)(cacheName);
            (0, utils_1.validateListName)(listName);
        }
        catch (err) {
            return new __1.CacheListRemoveValue.Error((0, errors_1.normalizeSdkError)(err));
        }
        this.logger.trace(`Issuing 'listRemoveValue' request; listName: ${listName}, value length: ${value.length}`);
        const result = await this.sendListRemoveValue(cacheName, this.convert(listName), this.convert(value));
        this.logger.trace(`'listRemoveValue' request result: ${result.toString()}`);
        return result;
    }
    async sendListRemoveValue(cacheName, listName, value) {
        const request = new grpcCache._ListRemoveRequest({
            list_name: listName,
            all_elements_with_value: value,
        });
        const metadata = this.createMetadata(cacheName);
        return await new Promise(resolve => {
            this.clientWrapper.getClient().ListRemove(request, metadata, {
                interceptors: this.interceptors,
            }, (err, resp) => {
                if (resp) {
                    resolve(new __1.CacheListRemoveValue.Success());
                }
                else {
                    resolve(new __1.CacheListRemoveValue.Error((0, cache_service_error_mapper_1.cacheServiceErrorMapper)(err)));
                }
            });
        });
    }
    async dictionaryFetch(cacheName, dictionaryName) {
        try {
            (0, utils_1.validateCacheName)(cacheName);
            (0, utils_1.validateDictionaryName)(dictionaryName);
        }
        catch (err) {
            return new __1.CacheDictionaryFetch.Error((0, errors_1.normalizeSdkError)(err));
        }
        this.logger.trace(`Issuing 'dictionaryFetch' request; dictionaryName: ${dictionaryName}`);
        const result = await this.sendDictionaryFetch(cacheName, this.convert(dictionaryName));
        this.logger.trace(`'dictionaryFetch' request result: ${result.toString()}`);
        return result;
    }
    async sendDictionaryFetch(cacheName, dictionaryName) {
        const request = new grpcCache._DictionaryFetchRequest({
            dictionary_name: dictionaryName,
        });
        const metadata = this.createMetadata(cacheName);
        return await new Promise(resolve => {
            this.clientWrapper.getClient().DictionaryFetch(request, metadata, {
                interceptors: this.interceptors,
            }, (err, resp) => {
                if (resp === null || resp === void 0 ? void 0 : resp.found) {
                    resolve(new __1.CacheDictionaryFetch.Hit(resp.found.items));
                }
                else if (resp === null || resp === void 0 ? void 0 : resp.missing) {
                    resolve(new __1.CacheDictionaryFetch.Miss());
                }
                else {
                    resolve(new __1.CacheDictionaryFetch.Error((0, cache_service_error_mapper_1.cacheServiceErrorMapper)(err)));
                }
            });
        });
    }
    async dictionarySetField(cacheName, dictionaryName, field, value, ttl = __1.CollectionTtl.fromCacheTtl()) {
        var _a;
        try {
            (0, utils_1.validateCacheName)(cacheName);
            (0, utils_1.validateDictionaryName)(dictionaryName);
        }
        catch (err) {
            return new __1.CacheDictionarySetField.Error((0, errors_1.normalizeSdkError)(err));
        }
        this.logger.trace(`Issuing 'dictionarySetField' request; field: ${field.toString()}, value length: ${value.length}, ttl: ${(_a = ttl.ttlSeconds.toString()) !== null && _a !== void 0 ? _a : 'null'}`);
        const result = await this.sendDictionarySetField(cacheName, this.convert(dictionaryName), this.convert(field), this.convert(value), ttl.ttlMilliseconds() || this.defaultTtlSeconds * 1000, ttl.refreshTtl());
        this.logger.trace(`'dictionarySetField' request result: ${result.toString()}`);
        return result;
    }
    async sendDictionarySetField(cacheName, dictionaryName, field, value, ttlMilliseconds, refreshTtl) {
        const request = new grpcCache._DictionarySetRequest({
            dictionary_name: dictionaryName,
            items: this.toSingletonFieldValuePair(field, value),
            ttl_milliseconds: ttlMilliseconds,
            refresh_ttl: refreshTtl,
        });
        const metadata = this.createMetadata(cacheName);
        return await new Promise(resolve => {
            this.clientWrapper.getClient().DictionarySet(request, metadata, {
                interceptors: this.interceptors,
            }, (err, resp) => {
                if (resp) {
                    resolve(new __1.CacheDictionarySetField.Success());
                }
                else {
                    resolve(new __1.CacheDictionarySetField.Error((0, cache_service_error_mapper_1.cacheServiceErrorMapper)(err)));
                }
            });
        });
    }
    async dictionarySetFields(cacheName, dictionaryName, elements, ttl = __1.CollectionTtl.fromCacheTtl()) {
        var _a;
        try {
            (0, utils_1.validateCacheName)(cacheName);
            (0, utils_1.validateDictionaryName)(dictionaryName);
        }
        catch (err) {
            return new __1.CacheDictionarySetFields.Error((0, errors_1.normalizeSdkError)(err));
        }
        this.logger.trace(`Issuing 'dictionarySetFields' request; elements: ${elements.toString()}, ttl: ${(_a = ttl.ttlSeconds.toString()) !== null && _a !== void 0 ? _a : 'null'}`);
        const dictionaryFieldValuePairs = this.convertMapOrRecord(elements);
        const result = await this.sendDictionarySetFields(cacheName, this.convert(dictionaryName), dictionaryFieldValuePairs, ttl.ttlMilliseconds() || this.defaultTtlSeconds * 1000, ttl.refreshTtl());
        this.logger.trace(`'dictionarySetFields' request result: ${result.toString()}`);
        return result;
    }
    async sendDictionarySetFields(cacheName, dictionaryName, elements, ttlMilliseconds, refreshTtl) {
        const request = new grpcCache._DictionarySetRequest({
            dictionary_name: dictionaryName,
            items: elements,
            ttl_milliseconds: ttlMilliseconds,
            refresh_ttl: refreshTtl,
        });
        const metadata = this.createMetadata(cacheName);
        return await new Promise(resolve => {
            this.clientWrapper.getClient().DictionarySet(request, metadata, {
                interceptors: this.interceptors,
            }, (err, resp) => {
                if (resp) {
                    resolve(new __1.CacheDictionarySetFields.Success());
                }
                else {
                    resolve(new __1.CacheDictionarySetFields.Error((0, cache_service_error_mapper_1.cacheServiceErrorMapper)(err)));
                }
            });
        });
    }
    async dictionaryGetField(cacheName, dictionaryName, field) {
        try {
            (0, utils_1.validateCacheName)(cacheName);
            (0, utils_1.validateDictionaryName)(dictionaryName);
        }
        catch (err) {
            return new __1.CacheDictionaryGetField.Error((0, errors_1.normalizeSdkError)(err), this.convert(field));
        }
        this.logger.trace(`Issuing 'dictionaryGetField' request; field: ${field.toString()}`);
        const result = await this.sendDictionaryGetField(cacheName, this.convert(dictionaryName), this.convert(field));
        this.logger.trace(`'dictionaryGetField' request result: ${result.toString()}`);
        return result;
    }
    async sendDictionaryGetField(cacheName, dictionaryName, field) {
        const request = new grpcCache._DictionaryGetRequest({
            dictionary_name: dictionaryName,
            fields: [field],
        });
        const metadata = this.createMetadata(cacheName);
        return await new Promise(resolve => {
            this.clientWrapper.getClient().DictionaryGet(request, metadata, {
                interceptors: this.interceptors,
            }, (err, resp) => {
                if ((resp === null || resp === void 0 ? void 0 : resp.dictionary) === 'missing') {
                    resolve(new __1.CacheDictionaryGetField.Miss(field));
                }
                else if ((resp === null || resp === void 0 ? void 0 : resp.dictionary) === 'found') {
                    if ((resp === null || resp === void 0 ? void 0 : resp.found.items.length) === 0) {
                        resolve(new __1.CacheDictionaryGetField.Error(new __1.UnknownError('_DictionaryGetResponseResponse contained no data but was found'), field));
                    }
                    else if ((resp === null || resp === void 0 ? void 0 : resp.found.items[0].result) === grpcCache.ECacheResult.Miss) {
                        resolve(new __1.CacheDictionaryGetField.Miss(field));
                    }
                    else {
                        resolve(new __1.CacheDictionaryGetField.Hit(resp === null || resp === void 0 ? void 0 : resp.found.items[0].cache_body, field));
                    }
                }
                else {
                    resolve(new __1.CacheDictionaryGetField.Error((0, cache_service_error_mapper_1.cacheServiceErrorMapper)(err), field));
                }
            });
        });
    }
    async dictionaryGetFields(cacheName, dictionaryName, fields) {
        try {
            (0, utils_1.validateCacheName)(cacheName);
            (0, utils_1.validateDictionaryName)(dictionaryName);
        }
        catch (err) {
            return new __1.CacheDictionaryGetFields.Error((0, errors_1.normalizeSdkError)(err));
        }
        this.logger.trace(`Issuing 'dictionaryGetFields' request; fields: ${fields.toString()}`);
        const result = await this.sendDictionaryGetFields(cacheName, this.convert(dictionaryName), this.convertArray(fields));
        this.logger.trace(`'dictionaryGetFields' request result: ${result.toString()}`);
        return result;
    }
    async sendDictionaryGetFields(cacheName, dictionaryName, fields) {
        const request = new grpcCache._DictionaryGetRequest({
            dictionary_name: dictionaryName,
            fields: fields,
        });
        const metadata = this.createMetadata(cacheName);
        return await new Promise(resolve => {
            this.clientWrapper.getClient().DictionaryGet(request, metadata, {
                interceptors: this.interceptors,
            }, (err, resp) => {
                if ((resp === null || resp === void 0 ? void 0 : resp.dictionary) === 'found') {
                    const items = resp.found.items.map(item => {
                        const result = this.convertECacheResult(item.result);
                        return new grpc_response_types_1._DictionaryGetResponsePart(result, item.cache_body);
                    });
                    resolve(new __1.CacheDictionaryGetFields.Hit(items, fields));
                }
                else if ((resp === null || resp === void 0 ? void 0 : resp.dictionary) === 'missing') {
                    resolve(new __1.CacheDictionaryGetFields.Miss());
                }
                else {
                    resolve(new __1.CacheDictionaryGetFields.Error((0, cache_service_error_mapper_1.cacheServiceErrorMapper)(err)));
                }
            });
        });
    }
    async dictionaryRemoveField(cacheName, dictionaryName, field) {
        try {
            (0, utils_1.validateCacheName)(cacheName);
            (0, utils_1.validateDictionaryName)(dictionaryName);
        }
        catch (err) {
            return new __1.CacheDictionaryRemoveField.Error((0, errors_1.normalizeSdkError)(err));
        }
        this.logger.trace(`Issuing 'dictionaryRemoveField' request; field: ${field.toString()}`);
        const result = await this.sendDictionaryRemoveField(cacheName, this.convert(dictionaryName), this.convert(field));
        this.logger.trace(`'dictionaryRemoveField' request result: ${result.toString()}`);
        return result;
    }
    async sendDictionaryRemoveField(cacheName, dictionaryName, field) {
        const request = new grpcCache._DictionaryDeleteRequest({
            dictionary_name: dictionaryName,
            some: new grpcCache._DictionaryDeleteRequest.Some(),
        });
        request.some.fields.push(field);
        const metadata = this.createMetadata(cacheName);
        return await new Promise(resolve => {
            this.clientWrapper.getClient().DictionaryDelete(request, metadata, {
                interceptors: this.interceptors,
            }, (err, resp) => {
                if (resp) {
                    resolve(new __1.CacheDictionaryRemoveField.Success());
                }
                else {
                    resolve(new __1.CacheDictionaryRemoveField.Error((0, cache_service_error_mapper_1.cacheServiceErrorMapper)(err)));
                }
            });
        });
    }
    async dictionaryRemoveFields(cacheName, dictionaryName, fields) {
        try {
            (0, utils_1.validateCacheName)(cacheName);
            (0, utils_1.validateDictionaryName)(dictionaryName);
        }
        catch (err) {
            return new __1.CacheDictionaryRemoveFields.Error((0, errors_1.normalizeSdkError)(err));
        }
        this.logger.trace(`Issuing 'dictionaryRemoveFields' request; fields: ${fields.toString()}`);
        const result = await this.sendDictionaryRemoveFields(cacheName, this.convert(dictionaryName), this.convertArray(fields));
        this.logger.trace(`'dictionaryRemoveFields' request result: ${result.toString()}`);
        return result;
    }
    async sendDictionaryRemoveFields(cacheName, dictionaryName, fields) {
        const request = new grpcCache._DictionaryDeleteRequest({
            dictionary_name: dictionaryName,
            some: new grpcCache._DictionaryDeleteRequest.Some(),
        });
        fields.forEach(field => request.some.fields.push(field));
        const metadata = this.createMetadata(cacheName);
        return await new Promise(resolve => {
            this.clientWrapper.getClient().DictionaryDelete(request, metadata, {
                interceptors: this.interceptors,
            }, (err, resp) => {
                if (resp) {
                    resolve(new __1.CacheDictionaryRemoveFields.Success());
                }
                else {
                    resolve(new __1.CacheDictionaryRemoveFields.Error((0, cache_service_error_mapper_1.cacheServiceErrorMapper)(err)));
                }
            });
        });
    }
    async dictionaryLength(cacheName, dictionaryName) {
        try {
            (0, utils_1.validateCacheName)(cacheName);
            (0, utils_1.validateDictionaryName)(dictionaryName);
        }
        catch (err) {
            return new __1.CacheDictionaryLength.Error((0, errors_1.normalizeSdkError)(err));
        }
        this.logger.trace(`Issuing 'dictionaryLength' request; dictionaryName: ${dictionaryName}`);
        const result = await this.sendDictionaryLength(cacheName, this.convert(dictionaryName));
        this.logger.trace(`'dictionaryLength' request result: ${result.toString()}`);
        return result;
    }
    async sendDictionaryLength(cacheName, dictionaryName) {
        const request = new grpcCache._DictionaryLengthRequest({
            dictionary_name: dictionaryName,
        });
        const metadata = this.createMetadata(cacheName);
        return await new Promise(resolve => {
            this.clientWrapper.getClient().DictionaryLength(request, metadata, {
                interceptors: this.interceptors,
            }, (err, resp) => {
                if (resp === null || resp === void 0 ? void 0 : resp.missing) {
                    resolve(new __1.CacheDictionaryLength.Miss());
                }
                else if (resp === null || resp === void 0 ? void 0 : resp.found) {
                    resolve(new __1.CacheDictionaryLength.Hit(resp.found.length));
                }
                else {
                    resolve(new __1.CacheDictionaryLength.Error((0, cache_service_error_mapper_1.cacheServiceErrorMapper)(err)));
                }
            });
        });
    }
    async increment(cacheName, field, amount = 1, ttl) {
        var _a;
        try {
            (0, utils_1.validateCacheName)(cacheName);
        }
        catch (err) {
            return new __1.CacheIncrement.Error((0, errors_1.normalizeSdkError)(err));
        }
        this.logger.trace(`Issuing 'increment' request; field: ${field.toString()}, amount : ${amount}, ttl: ${(_a = ttl === null || ttl === void 0 ? void 0 : ttl.toString()) !== null && _a !== void 0 ? _a : 'null'}`);
        const result = await this.sendIncrement(cacheName, this.convert(field), amount, ttl || this.defaultTtlSeconds * 1000);
        this.logger.trace(`'increment' request result: ${result.toString()}`);
        return result;
    }
    async sendIncrement(cacheName, field, amount = 1, ttlMilliseconds) {
        const request = new grpcCache._IncrementRequest({
            cache_key: field,
            amount,
            ttl_milliseconds: ttlMilliseconds,
        });
        const metadata = this.createMetadata(cacheName);
        return await new Promise(resolve => {
            this.clientWrapper.getClient().Increment(request, metadata, {
                interceptors: this.interceptors,
            }, (err, resp) => {
                if (resp) {
                    if (resp.value) {
                        resolve(new __1.CacheIncrement.Success(resp.value));
                    }
                    else {
                        resolve(new __1.CacheIncrement.Success(0));
                    }
                }
                else {
                    resolve(new __1.CacheIncrement.Error((0, cache_service_error_mapper_1.cacheServiceErrorMapper)(err)));
                }
            });
        });
    }
    async dictionaryIncrement(cacheName, dictionaryName, field, amount = 1, ttl = __1.CollectionTtl.fromCacheTtl()) {
        var _a;
        try {
            (0, utils_1.validateCacheName)(cacheName);
            (0, utils_1.validateDictionaryName)(dictionaryName);
        }
        catch (err) {
            return new __1.CacheDictionaryIncrement.Error((0, errors_1.normalizeSdkError)(err));
        }
        this.logger.trace(`Issuing 'dictionaryIncrement' request; field: ${field.toString()}, amount : ${amount}, ttl: ${(_a = ttl.ttlSeconds.toString()) !== null && _a !== void 0 ? _a : 'null'}`);
        const result = await this.sendDictionaryIncrement(cacheName, this.convert(dictionaryName), this.convert(field), amount, ttl.ttlMilliseconds() || this.defaultTtlSeconds * 1000, ttl.refreshTtl());
        this.logger.trace(`'dictionaryIncrement' request result: ${result.toString()}`);
        return result;
    }
    async sendDictionaryIncrement(cacheName, dictionaryName, field, amount, ttlMilliseconds, refreshTtl) {
        const request = new grpcCache._DictionaryIncrementRequest({
            dictionary_name: dictionaryName,
            field,
            amount,
            ttl_milliseconds: ttlMilliseconds,
            refresh_ttl: refreshTtl,
        });
        const metadata = this.createMetadata(cacheName);
        return await new Promise(resolve => {
            this.clientWrapper.getClient().DictionaryIncrement(request, metadata, {
                interceptors: this.interceptors,
            }, (err, resp) => {
                if (resp) {
                    if (resp.value) {
                        resolve(new __1.CacheDictionaryIncrement.Success(resp.value));
                    }
                    else {
                        resolve(new __1.CacheDictionaryIncrement.Success(0));
                    }
                }
                else {
                    resolve(new __1.CacheDictionaryIncrement.Error((0, cache_service_error_mapper_1.cacheServiceErrorMapper)(err)));
                }
            });
        });
    }
    async sortedSetPutElement(cacheName, sortedSetName, value, score, ttl = __1.CollectionTtl.fromCacheTtl()) {
        var _a;
        try {
            (0, utils_1.validateCacheName)(cacheName);
            (0, utils_1.validateSortedSetName)(sortedSetName);
        }
        catch (err) {
            return new __1.CacheSortedSetPutElement.Error((0, errors_1.normalizeSdkError)(err));
        }
        this.logger.trace("Issuing 'sortedSetPutElement' request; value: %s, score : %s, ttl: %s", (0, utils_1.truncateString)(value.toString()), score, (_a = ttl.ttlSeconds.toString()) !== null && _a !== void 0 ? _a : 'null');
        const result = await this.sendSortedSetPutElement(cacheName, this.convert(sortedSetName), this.convert(value), score, ttl.ttlMilliseconds() || this.defaultTtlSeconds * 1000, ttl.refreshTtl());
        this.logger.trace("'sortedSetPutElement' request result: %s", result.toString());
        return result;
    }
    async sendSortedSetPutElement(cacheName, sortedSetName, value, score, ttlMilliseconds, refreshTtl) {
        const request = new grpcCache._SortedSetPutRequest({
            set_name: sortedSetName,
            elements: [new grpcCache._SortedSetElement({ value, score })],
            ttl_milliseconds: ttlMilliseconds,
            refresh_ttl: refreshTtl,
        });
        const metadata = this.createMetadata(cacheName);
        return await new Promise(resolve => {
            this.clientWrapper.getClient().SortedSetPut(request, metadata, {
                interceptors: this.interceptors,
            }, (err, resp) => {
                if (resp) {
                    resolve(new __1.CacheSortedSetPutElement.Success());
                }
                else {
                    resolve(new __1.CacheSortedSetPutElement.Error((0, cache_service_error_mapper_1.cacheServiceErrorMapper)(err)));
                }
            });
        });
    }
    async sortedSetPutElements(cacheName, sortedSetName, elements, ttl = __1.CollectionTtl.fromCacheTtl()) {
        var _a;
        try {
            (0, utils_1.validateCacheName)(cacheName);
            (0, utils_1.validateSortedSetName)(sortedSetName);
        }
        catch (err) {
            return new __1.CacheSortedSetPutElements.Error((0, errors_1.normalizeSdkError)(err));
        }
        this.logger.trace("Issuing 'sortedSetPutElements' request; value: %s, score : %s, ttl: %s", elements.toString(), (_a = ttl.ttlSeconds.toString()) !== null && _a !== void 0 ? _a : 'null');
        const sortedSetValueScorePairs = this.convertSortedSetMapOrRecord(elements);
        const result = await this.sendSortedSetPutElements(cacheName, this.convert(sortedSetName), sortedSetValueScorePairs, ttl.ttlMilliseconds() || this.defaultTtlSeconds * 1000, ttl.refreshTtl());
        this.logger.trace("'sortedSetPutElements' request result: %s", result.toString());
        return result;
    }
    async sendSortedSetPutElements(cacheName, sortedSetName, elements, ttlMilliseconds, refreshTtl) {
        const request = new grpcCache._SortedSetPutRequest({
            set_name: sortedSetName,
            elements: elements,
            ttl_milliseconds: ttlMilliseconds,
            refresh_ttl: refreshTtl,
        });
        const metadata = this.createMetadata(cacheName);
        return await new Promise(resolve => {
            this.clientWrapper.getClient().SortedSetPut(request, metadata, {
                interceptors: this.interceptors,
            }, (err, resp) => {
                if (resp) {
                    resolve(new __1.CacheSortedSetPutElements.Success());
                }
                else {
                    resolve(new __1.CacheSortedSetPutElements.Error((0, cache_service_error_mapper_1.cacheServiceErrorMapper)(err)));
                }
            });
        });
    }
    async sortedSetFetchByRank(cacheName, sortedSetName, order, startRank, endRank) {
        var _a, _b;
        try {
            (0, utils_1.validateCacheName)(cacheName);
            (0, utils_1.validateSortedSetName)(sortedSetName);
            (0, utils_1.validateSortedSetRanks)(startRank, endRank);
        }
        catch (err) {
            return new __1.CacheSortedSetFetch.Error((0, errors_1.normalizeSdkError)(err));
        }
        this.logger.trace("Issuing 'sortedSetFetchByRank' request; startRank: %s, endRank : %s, order: %s", (_a = startRank.toString()) !== null && _a !== void 0 ? _a : 'null', (_b = endRank === null || endRank === void 0 ? void 0 : endRank.toString()) !== null && _b !== void 0 ? _b : 'null', order.toString());
        const result = await this.sendSortedSetFetchByRank(cacheName, this.convert(sortedSetName), order, startRank, endRank);
        this.logger.trace("'sortedSetFetchByRank' request result: %s", result.toString());
        return result;
    }
    async sendSortedSetFetchByRank(cacheName, sortedSetName, order, startRank, endRank) {
        const by_index = new grpcCache._SortedSetFetchRequest._ByIndex();
        if (startRank) {
            by_index.inclusive_start_index = startRank;
        }
        else {
            by_index.unbounded_start = new grpcCache._Unbounded();
        }
        if (endRank) {
            by_index.exclusive_end_index = endRank;
        }
        else {
            by_index.unbounded_end = new grpcCache._Unbounded();
        }
        const protoBufOrder = order === __1.SortedSetOrder.Descending
            ? grpcCache._SortedSetFetchRequest.Order.DESCENDING
            : grpcCache._SortedSetFetchRequest.Order.ASCENDING;
        const request = new grpcCache._SortedSetFetchRequest({
            set_name: sortedSetName,
            order: protoBufOrder,
            with_scores: true,
            by_index: by_index,
        });
        const metadata = this.createMetadata(cacheName);
        return await new Promise(resolve => {
            this.clientWrapper.getClient().SortedSetFetch(request, metadata, {
                interceptors: this.interceptors,
            }, (err, resp) => {
                var _a;
                if (resp) {
                    if (resp === null || resp === void 0 ? void 0 : resp.found) {
                        if ((_a = resp === null || resp === void 0 ? void 0 : resp.found) === null || _a === void 0 ? void 0 : _a.values_with_scores) {
                            resolve(new __1.CacheSortedSetFetch.Hit(resp.found.values_with_scores.elements));
                        }
                        else {
                            resolve(new __1.CacheSortedSetFetch.Error(new __1.UnknownError('Unknown sorted set fetch hit response type')));
                        }
                    }
                    else if (resp === null || resp === void 0 ? void 0 : resp.missing) {
                        resolve(new __1.CacheSortedSetFetch.Miss());
                    }
                    else {
                        resolve(new __1.CacheSortedSetFetch.Error(new __1.UnknownError('Unknown sorted set fetch response type')));
                    }
                }
                else {
                    resolve(new __1.CacheSortedSetFetch.Error((0, cache_service_error_mapper_1.cacheServiceErrorMapper)(err)));
                }
            });
        });
    }
    async sortedSetFetchByScore(cacheName, sortedSetName, order, minScore, maxScore, offset, count) {
        var _a, _b, _c, _d;
        try {
            (0, utils_1.validateCacheName)(cacheName);
            (0, utils_1.validateSortedSetName)(sortedSetName);
            (0, utils_1.validateSortedSetScores)(minScore, maxScore);
            if (offset !== undefined) {
                (0, utils_1.validateSortedSetOffset)(offset);
            }
            if (count !== undefined) {
                (0, utils_1.validateSortedSetCount)(count);
            }
        }
        catch (err) {
            return new __1.CacheSortedSetFetch.Error((0, errors_1.normalizeSdkError)(err));
        }
        this.logger.trace("Issuing 'sortedSetFetchByScore' request; minScore: %s, maxScore : %s, order: %s, offset: %s, count: %s", (_a = minScore === null || minScore === void 0 ? void 0 : minScore.toString()) !== null && _a !== void 0 ? _a : 'null', (_b = maxScore === null || maxScore === void 0 ? void 0 : maxScore.toString()) !== null && _b !== void 0 ? _b : 'null', order.toString(), (_c = offset === null || offset === void 0 ? void 0 : offset.toString()) !== null && _c !== void 0 ? _c : 'null', (_d = count === null || count === void 0 ? void 0 : count.toString()) !== null && _d !== void 0 ? _d : 'null');
        const result = await this.sendSortedSetFetchByScore(cacheName, this.convert(sortedSetName), order, minScore, maxScore, offset, count);
        this.logger.trace("'sortedSetFetchByScore' request result: %s", result.toString());
        return result;
    }
    async sendSortedSetFetchByScore(cacheName, sortedSetName, order, minScore, maxScore, offset, count) {
        const by_score = new grpcCache._SortedSetFetchRequest._ByScore();
        if (minScore !== undefined) {
            by_score.min_score = new grpcCache._SortedSetFetchRequest._ByScore._Score({
                score: minScore,
                exclusive: false,
            });
        }
        else {
            by_score.unbounded_min = new grpcCache._Unbounded();
        }
        if (maxScore !== undefined) {
            by_score.max_score = new grpcCache._SortedSetFetchRequest._ByScore._Score({
                score: maxScore,
                exclusive: false,
            });
        }
        else {
            by_score.unbounded_max = new grpcCache._Unbounded();
        }
        by_score.offset = offset !== null && offset !== void 0 ? offset : 0;
        // Note: the service reserves negative counts to mean all elements in the
        // result set.
        by_score.count = count !== null && count !== void 0 ? count : -1;
        const protoBufOrder = order === __1.SortedSetOrder.Descending
            ? grpcCache._SortedSetFetchRequest.Order.DESCENDING
            : grpcCache._SortedSetFetchRequest.Order.ASCENDING;
        const request = new grpcCache._SortedSetFetchRequest({
            set_name: sortedSetName,
            order: protoBufOrder,
            with_scores: true,
            by_score: by_score,
        });
        const metadata = this.createMetadata(cacheName);
        return await new Promise(resolve => {
            this.clientWrapper.getClient().SortedSetFetch(request, metadata, {
                interceptors: this.interceptors,
            }, (err, resp) => {
                var _a;
                if (resp) {
                    if (resp === null || resp === void 0 ? void 0 : resp.found) {
                        if ((_a = resp === null || resp === void 0 ? void 0 : resp.found) === null || _a === void 0 ? void 0 : _a.values_with_scores) {
                            resolve(new __1.CacheSortedSetFetch.Hit(resp.found.values_with_scores.elements));
                        }
                        else {
                            resolve(new __1.CacheSortedSetFetch.Error(new __1.UnknownError('Unknown sorted set fetch hit response type')));
                        }
                    }
                    else if (resp === null || resp === void 0 ? void 0 : resp.missing) {
                        resolve(new __1.CacheSortedSetFetch.Miss());
                    }
                    else {
                        resolve(new __1.CacheSortedSetFetch.Error(new __1.UnknownError('Unknown sorted set fetch response type')));
                    }
                }
                else {
                    resolve(new __1.CacheSortedSetFetch.Error((0, cache_service_error_mapper_1.cacheServiceErrorMapper)(err)));
                }
            });
        });
    }
    async sortedSetGetRank(cacheName, sortedSetName, value) {
        try {
            (0, utils_1.validateCacheName)(cacheName);
            (0, utils_1.validateSortedSetName)(sortedSetName);
        }
        catch (err) {
            return new __1.CacheSortedSetGetRank.Error((0, errors_1.normalizeSdkError)(err));
        }
        this.logger.trace("Issuing 'sortedSetGetRank' request; value: %s", (0, utils_1.truncateString)(value.toString()));
        const result = await this.sendSortedSetGetRank(cacheName, this.convert(sortedSetName), this.convert(value));
        this.logger.trace("'sortedSetGetRank' request result: %s", (0, utils_1.truncateString)(result.toString()));
        return result;
    }
    async sendSortedSetGetRank(cacheName, sortedSetName, value) {
        const request = new grpcCache._SortedSetGetRankRequest({
            set_name: sortedSetName,
            value: value,
        });
        const metadata = this.createMetadata(cacheName);
        return await new Promise(resolve => {
            this.clientWrapper
                .getClient()
                .SortedSetGetRank(request, metadata, { interceptors: this.interceptors }, (err, resp) => {
                var _a, _b;
                if ((resp === null || resp === void 0 ? void 0 : resp.missing) ||
                    ((_a = resp === null || resp === void 0 ? void 0 : resp.element_rank) === null || _a === void 0 ? void 0 : _a.result) === ECacheResult.Miss) {
                    resolve(new __1.CacheSortedSetGetRank.Miss());
                }
                else if (((_b = resp === null || resp === void 0 ? void 0 : resp.element_rank) === null || _b === void 0 ? void 0 : _b.result) === ECacheResult.Hit) {
                    if ((resp === null || resp === void 0 ? void 0 : resp.element_rank.rank) === undefined) {
                        resolve(new __1.CacheSortedSetGetRank.Miss());
                    }
                    else {
                        resolve(new __1.CacheSortedSetGetRank.Hit(resp.element_rank.rank));
                    }
                }
                else {
                    resolve(new __1.CacheSortedSetGetRank.Error((0, cache_service_error_mapper_1.cacheServiceErrorMapper)(err)));
                }
            });
        });
    }
    async sortedSetGetScore(cacheName, sortedSetName, value) {
        const responses = await this.sortedSetGetScores(cacheName, sortedSetName, [
            value,
        ]);
        if (responses instanceof __1.CacheSortedSetGetScores.Hit) {
            return responses.responses()[0];
        }
        else if (responses instanceof __1.CacheSortedSetGetScores.Miss) {
            return new __1.CacheSortedSetGetScore.Miss(this.convert(value));
        }
        else if (responses instanceof __1.CacheSortedSetGetScores.Error) {
            return new __1.CacheSortedSetGetScore.Error(responses.innerException(), this.convert(value));
        }
        return new __1.CacheSortedSetGetScore.Error(new __1.UnknownError('Unknown response type'), this.convert(value));
    }
    async sortedSetGetScores(cacheName, sortedSetName, values) {
        try {
            (0, utils_1.validateCacheName)(cacheName);
            (0, utils_1.validateSortedSetName)(sortedSetName);
        }
        catch (err) {
            return new __1.CacheSortedSetGetScores.Error((0, errors_1.normalizeSdkError)(err));
        }
        this.logger.trace("Issuing 'sortedSetGetScores' request; values: %s", (0, utils_1.truncateString)(values.toString()));
        const result = await this.sendSortedSetGetScores(cacheName, this.convert(sortedSetName), values.map(value => this.convert(value)));
        this.logger.trace("'sortedSetGetScores' request result: %s", (0, utils_1.truncateString)(result.toString()));
        return result;
    }
    async sendSortedSetGetScores(cacheName, sortedSetName, values) {
        const request = new grpcCache._SortedSetGetScoreRequest({
            set_name: sortedSetName,
            values: values,
        });
        const metadata = this.createMetadata(cacheName);
        return await new Promise(resolve => {
            this.clientWrapper
                .getClient()
                .SortedSetGetScore(request, metadata, { interceptors: this.interceptors }, (err, resp) => {
                if (resp === null || resp === void 0 ? void 0 : resp.missing) {
                    resolve(new __1.CacheSortedSetGetScores.Miss());
                }
                else if (resp === null || resp === void 0 ? void 0 : resp.found) {
                    const elements = resp.found.elements.map(ele => {
                        const result = this.convertECacheResult(ele.result);
                        return new grpc_response_types_1._SortedSetGetScoreResponsePart(result, ele.score);
                    });
                    resolve(new __1.CacheSortedSetGetScores.Hit(elements, values));
                }
                else {
                    resolve(new __1.CacheSortedSetGetScores.Error((0, cache_service_error_mapper_1.cacheServiceErrorMapper)(err)));
                }
            });
        });
    }
    async sortedSetIncrementScore(cacheName, sortedSetName, value, amount = 1, ttl = __1.CollectionTtl.fromCacheTtl()) {
        try {
            (0, utils_1.validateCacheName)(cacheName);
            (0, utils_1.validateSortedSetName)(sortedSetName);
        }
        catch (err) {
            return new __1.CacheSortedSetFetch.Error((0, errors_1.normalizeSdkError)(err));
        }
        this.logger.trace("Issuing 'sortedSetIncrementScore' request; value: %s", (0, utils_1.truncateString)(value.toString()));
        const result = await this.sendSortedSetIncrementScore(cacheName, this.convert(sortedSetName), this.convert(value), amount, ttl.ttlMilliseconds() || this.defaultTtlSeconds * 1000, ttl.refreshTtl());
        this.logger.trace("'sortedSetIncrementScore' request result: %s", (0, utils_1.truncateString)(result.toString()));
        return result;
    }
    async sendSortedSetIncrementScore(cacheName, sortedSetName, value, amount, ttlMilliseconds, refreshTtl) {
        const request = new grpcCache._SortedSetIncrementRequest({
            set_name: sortedSetName,
            value: value,
            amount: amount,
            ttl_milliseconds: ttlMilliseconds,
            refresh_ttl: refreshTtl,
        });
        const metadata = this.createMetadata(cacheName);
        return await new Promise(resolve => {
            this.clientWrapper
                .getClient()
                .SortedSetIncrement(request, metadata, { interceptors: this.interceptors }, (err, resp) => {
                if (resp) {
                    if (resp.score) {
                        resolve(new __1.CacheSortedSetIncrementScore.Success(resp.score));
                    }
                    else {
                        resolve(new __1.CacheSortedSetIncrementScore.Success(0));
                    }
                }
                else {
                    resolve(new __1.CacheDictionaryIncrement.Error((0, cache_service_error_mapper_1.cacheServiceErrorMapper)(err)));
                }
            });
        });
    }
    async sortedSetRemoveElement(cacheName, sortedSetName, value) {
        try {
            (0, utils_1.validateCacheName)(cacheName);
            (0, utils_1.validateSortedSetName)(sortedSetName);
        }
        catch (err) {
            return new __1.CacheSortedSetFetch.Error((0, errors_1.normalizeSdkError)(err));
        }
        this.logger.trace("Issuing 'sortedSetRemoveElement' request");
        const result = await this.sendSortedSetRemoveElement(cacheName, this.convert(sortedSetName), this.convert(value));
        this.logger.trace("'sortedSetRemoveElement' request result: %s", (0, utils_1.truncateString)(result.toString()));
        return result;
    }
    async sendSortedSetRemoveElement(cacheName, sortedSetName, value) {
        const request = new grpcCache._SortedSetRemoveRequest({
            set_name: sortedSetName,
            some: new grpcCache._SortedSetRemoveRequest._Some({
                values: [value],
            }),
        });
        const metadata = this.createMetadata(cacheName);
        return await new Promise(resolve => {
            this.clientWrapper.getClient().SortedSetRemove(request, metadata, {
                interceptors: this.interceptors,
            }, err => {
                if (err) {
                    resolve(new __1.CacheSortedSetRemoveElement.Error((0, cache_service_error_mapper_1.cacheServiceErrorMapper)(err)));
                }
                else {
                    resolve(new __1.CacheSortedSetRemoveElement.Success());
                }
            });
        });
    }
    async sortedSetRemoveElements(cacheName, sortedSetName, values) {
        try {
            (0, utils_1.validateCacheName)(cacheName);
            (0, utils_1.validateSortedSetName)(sortedSetName);
        }
        catch (err) {
            return new __1.CacheSortedSetFetch.Error((0, errors_1.normalizeSdkError)(err));
        }
        this.logger.trace("Issuing 'sortedSetRemoveElements' request");
        const result = await this.sendSortedSetRemoveElements(cacheName, this.convert(sortedSetName), this.convertArray(values));
        this.logger.trace("'sortedSetRemoveElements' request result: %s", (0, utils_1.truncateString)(result.toString()));
        return result;
    }
    async sendSortedSetRemoveElements(cacheName, sortedSetName, values) {
        const request = new grpcCache._SortedSetRemoveRequest({
            set_name: sortedSetName,
            some: new grpcCache._SortedSetRemoveRequest._Some({
                values: values,
            }),
        });
        const metadata = this.createMetadata(cacheName);
        return await new Promise(resolve => {
            this.clientWrapper.getClient().SortedSetRemove(request, metadata, {
                interceptors: this.interceptors,
            }, err => {
                if (err) {
                    resolve(new __1.CacheSortedSetRemoveElements.Error((0, cache_service_error_mapper_1.cacheServiceErrorMapper)(err)));
                }
                else {
                    resolve(new __1.CacheSortedSetRemoveElements.Success());
                }
            });
        });
    }
    async sortedSetLength(cacheName, sortedSetName) {
        try {
            (0, utils_1.validateCacheName)(cacheName);
            (0, utils_1.validateSortedSetName)(sortedSetName);
        }
        catch (err) {
            return new __1.CacheSortedSetFetch.Error((0, errors_1.normalizeSdkError)(err));
        }
        this.logger.trace("Issuing 'sortedSetLength' request");
        const result = await this.sendSortedSetLength(cacheName, this.convert(sortedSetName));
        this.logger.trace("'sortedSetLength' request result: %s", (0, utils_1.truncateString)(result.toString()));
        return result;
    }
    async sendSortedSetLength(cacheName, sortedSetName) {
        const request = new grpcCache._SortedSetLengthRequest({
            set_name: sortedSetName,
        });
        const metadata = this.createMetadata(cacheName);
        return await new Promise(resolve => {
            this.clientWrapper.getClient().SortedSetLength(request, metadata, {
                interceptors: this.interceptors,
            }, (err, resp) => {
                if (resp === null || resp === void 0 ? void 0 : resp.missing) {
                    resolve(new __1.CacheSortedSetLength.Miss());
                }
                else if (resp === null || resp === void 0 ? void 0 : resp.found) {
                    if (!resp.found.length) {
                        resolve(new __1.CacheSortedSetLength.Miss());
                    }
                    else {
                        resolve(new __1.CacheSortedSetLength.Hit(resp.found.length));
                    }
                }
                else {
                    resolve(new __1.CacheSortedSetLength.Error((0, cache_service_error_mapper_1.cacheServiceErrorMapper)(err)));
                }
            });
        });
    }
    async sortedSetLengthByScore(cacheName, sortedSetName, minScore, maxScore) {
        var _a, _b;
        try {
            (0, utils_1.validateCacheName)(cacheName);
            (0, utils_1.validateSortedSetName)(sortedSetName);
            (0, utils_1.validateSortedSetScores)(minScore, maxScore);
        }
        catch (err) {
            return new __1.CacheSortedSetFetch.Error((0, errors_1.normalizeSdkError)(err));
        }
        this.logger.trace("Issuing 'sortedSetLengthByScore' request; minScore: %s, maxScore: %s", (_a = minScore === null || minScore === void 0 ? void 0 : minScore.toString()) !== null && _a !== void 0 ? _a : 'null', (_b = maxScore === null || maxScore === void 0 ? void 0 : maxScore.toString()) !== null && _b !== void 0 ? _b : 'null');
        const result = await this.sendSortedSetLengthByScore(cacheName, this.convert(sortedSetName), minScore, maxScore);
        this.logger.trace("'sortedSetLengthByScore' request result: %s", (0, utils_1.truncateString)(result.toString()));
        return result;
    }
    async sendSortedSetLengthByScore(cacheName, sortedSetName, minScore, maxScore) {
        const request = new grpcCache._SortedSetLengthByScoreRequest({
            set_name: sortedSetName,
        });
        if (minScore === undefined) {
            request.unbounded_min = new grpcCache._Unbounded();
        }
        else {
            request.inclusive_min = minScore;
        }
        if (maxScore === undefined) {
            request.unbounded_max = new grpcCache._Unbounded();
        }
        else {
            request.inclusive_max = maxScore;
        }
        const metadata = this.createMetadata(cacheName);
        return await new Promise(resolve => {
            this.clientWrapper.getClient().SortedSetLengthByScore(request, metadata, {
                interceptors: this.interceptors,
            }, (err, resp) => {
                if (resp === null || resp === void 0 ? void 0 : resp.missing) {
                    resolve(new __1.CacheSortedSetLengthByScore.Miss());
                }
                else if (resp === null || resp === void 0 ? void 0 : resp.found) {
                    if (!resp.found.length) {
                        resolve(new __1.CacheSortedSetLengthByScore.Miss());
                    }
                    else {
                        resolve(new __1.CacheSortedSetLengthByScore.Hit(resp.found.length));
                    }
                }
                else {
                    resolve(new __1.CacheSortedSetLengthByScore.Error((0, cache_service_error_mapper_1.cacheServiceErrorMapper)(err)));
                }
            });
        });
    }
    initializeInterceptors(loggerFactory, middlewares, middlewareRequestContext) {
        const headers = [
            new headers_interceptor_1.Header('Authorization', this.credentialProvider.getAuthToken()),
            new headers_interceptor_1.Header('Agent', `nodejs:${package_json_1.version}`),
        ];
        return [
            (0, middlewares_interceptor_1.middlewaresInterceptor)(loggerFactory, middlewares, middlewareRequestContext),
            new headers_interceptor_1.HeaderInterceptorProvider(headers).createHeadersInterceptor(),
            (0, client_timeout_interceptor_1.ClientTimeoutInterceptor)(this.requestTimeoutMs),
            ...(0, retry_interceptor_1.createRetryInterceptorIfEnabled)(this.configuration.getLoggerFactory(), this.configuration.getRetryStrategy()),
        ];
    }
    convert(v) {
        if (typeof v === 'string') {
            return this.textEncoder.encode(v);
        }
        return v;
    }
    convertArray(v) {
        return v.map(i => this.convert(i));
    }
    convertMapOrRecord(elements) {
        if (elements instanceof Map) {
            return [...elements.entries()].map(element => new grpcCache._DictionaryFieldValuePair({
                field: this.convert(element[0]),
                value: this.convert(element[1]),
            }));
        }
        else {
            return Object.entries(elements).map(element => new grpcCache._DictionaryFieldValuePair({
                field: this.convert(element[0]),
                value: this.convert(element[1]),
            }));
        }
    }
    convertSortedSetMapOrRecord(elements) {
        if (elements instanceof Map) {
            return [...elements.entries()].map(element => new grpcCache._SortedSetElement({
                value: this.convert(element[0]),
                score: element[1],
            }));
        }
        else {
            return Object.entries(elements).map(element => new grpcCache._SortedSetElement({
                value: this.convert(element[0]),
                score: element[1],
            }));
        }
    }
    async itemGetType(cacheName, key) {
        try {
            (0, utils_1.validateCacheName)(cacheName);
        }
        catch (err) {
            return new __1.CacheItemGetType.Error((0, errors_1.normalizeSdkError)(err));
        }
        return await this.sendItemGetType(cacheName, this.convert(key));
    }
    async sendItemGetType(cacheName, key) {
        const request = new grpcCache._ItemGetTypeRequest({
            cache_key: key,
        });
        const metadata = this.createMetadata(cacheName);
        return await new Promise(resolve => {
            this.clientWrapper.getClient().ItemGetType(request, metadata, {
                interceptors: this.interceptors,
            }, (err, resp) => {
                if (resp === null || resp === void 0 ? void 0 : resp.missing) {
                    resolve(new __1.CacheItemGetType.Miss());
                }
                else if (resp === null || resp === void 0 ? void 0 : resp.found) {
                    resolve(new __1.CacheItemGetType.Hit(this.convertItemTypeResult(resp.found.item_type)));
                }
                else {
                    resolve(new __1.CacheItemGetType.Error((0, cache_service_error_mapper_1.cacheServiceErrorMapper)(err)));
                }
            });
        });
    }
    async itemGetTtl(cacheName, key) {
        try {
            (0, utils_1.validateCacheName)(cacheName);
        }
        catch (err) {
            return new __1.CacheItemGetTtl.Error((0, errors_1.normalizeSdkError)(err));
        }
        return await this.sendItemGetTtl(cacheName, this.convert(key));
    }
    async sendItemGetTtl(cacheName, key) {
        const request = new grpcCache._ItemGetTtlRequest({
            cache_key: key,
        });
        const metadata = this.createMetadata(cacheName);
        return await new Promise(resolve => {
            this.clientWrapper.getClient().ItemGetTtl(request, metadata, {
                interceptors: this.interceptors,
            }, (err, resp) => {
                if (resp === null || resp === void 0 ? void 0 : resp.missing) {
                    resolve(new __1.CacheItemGetTtl.Miss());
                }
                else if (resp === null || resp === void 0 ? void 0 : resp.found) {
                    resolve(new __1.CacheItemGetTtl.Hit(resp.found.remaining_ttl_millis));
                }
                else {
                    resolve(new __1.CacheItemGetTtl.Error((0, cache_service_error_mapper_1.cacheServiceErrorMapper)(err)));
                }
            });
        });
    }
    async keyExists(cacheName, key) {
        try {
            (0, utils_1.validateCacheName)(cacheName);
        }
        catch (err) {
            return new __1.CacheKeyExists.Error((0, errors_1.normalizeSdkError)(err));
        }
        this.logger.trace("Issuing 'keyExists' request");
        const result = await this.sendKeyExists(cacheName, this.convert(key));
        this.logger.trace("'keyExists' request result: %s", (0, utils_1.truncateString)(result.toString()));
        return result;
    }
    async sendKeyExists(cacheName, key) {
        const request = new grpcCache._KeysExistRequest({
            cache_keys: [key],
        });
        const metadata = this.createMetadata(cacheName);
        return await new Promise(resolve => {
            this.clientWrapper.getClient().KeysExist(request, metadata, {
                interceptors: this.interceptors,
            }, (err, resp) => {
                if (resp) {
                    resolve(new __1.CacheKeyExists.Success(resp.exists));
                }
                else {
                    resolve(new __1.CacheKeyExists.Error((0, cache_service_error_mapper_1.cacheServiceErrorMapper)(err)));
                }
            });
        });
    }
    async updateTtl(cacheName, key, ttlMilliseconds) {
        var _a;
        try {
            (0, utils_1.validateCacheName)(cacheName);
            (0, utils_1.validateValidForSeconds)(ttlMilliseconds);
        }
        catch (err) {
            return new __1.CacheUpdateTtl.Error((0, errors_1.normalizeSdkError)(err));
        }
        this.logger.trace("Issuing 'updateTtl' request; ttlMilliseconds: %s", (_a = ttlMilliseconds === null || ttlMilliseconds === void 0 ? void 0 : ttlMilliseconds.toString()) !== null && _a !== void 0 ? _a : 'null');
        const result = await this.sendUpdateTtl(cacheName, this.convert(key), ttlMilliseconds);
        this.logger.trace("'updateTtl' request result: %s", (0, utils_1.truncateString)(result.toString()));
        return result;
    }
    async sendUpdateTtl(cacheName, key, ttlMilliseconds) {
        const request = new grpcCache._UpdateTtlRequest({
            cache_key: key,
            overwrite_to_milliseconds: ttlMilliseconds,
        });
        const metadata = this.createMetadata(cacheName);
        return await new Promise(resolve => {
            this.clientWrapper.getClient().UpdateTtl(request, metadata, {
                interceptors: this.interceptors,
            }, (err, resp) => {
                if (resp === null || resp === void 0 ? void 0 : resp.missing) {
                    resolve(new __1.CacheUpdateTtl.Miss());
                }
                else if (resp === null || resp === void 0 ? void 0 : resp.set) {
                    resolve(new __1.CacheUpdateTtl.Set());
                }
                else {
                    resolve(new __1.CacheUpdateTtl.Error((0, cache_service_error_mapper_1.cacheServiceErrorMapper)(err)));
                }
            });
        });
    }
    async keysExist(cacheName, keys) {
        try {
            (0, utils_1.validateCacheName)(cacheName);
        }
        catch (err) {
            return new __1.CacheKeysExist.Error((0, errors_1.normalizeSdkError)(err));
        }
        this.logger.trace("Issuing 'keysExist' request");
        const result = await this.sendKeysExist(cacheName, this.convertArray(keys));
        this.logger.trace("'keysExist' request result: %s", (0, utils_1.truncateString)(result.toString()));
        return result;
    }
    async sendKeysExist(cacheName, keys) {
        const request = new grpcCache._KeysExistRequest({
            cache_keys: keys,
        });
        const metadata = this.createMetadata(cacheName);
        return await new Promise(resolve => {
            this.clientWrapper.getClient().KeysExist(request, metadata, {
                interceptors: this.interceptors,
            }, (err, resp) => {
                if (resp) {
                    resolve(new __1.CacheKeysExist.Success(resp.exists));
                }
                else {
                    resolve(new __1.CacheKeysExist.Error((0, cache_service_error_mapper_1.cacheServiceErrorMapper)(err)));
                }
            });
        });
    }
    async increaseTtl(cacheName, key, ttlMilliseconds) {
        var _a;
        try {
            (0, utils_1.validateCacheName)(cacheName);
            (0, utils_1.validateValidForSeconds)(ttlMilliseconds);
        }
        catch (err) {
            return new __1.CacheIncreaseTtl.Error((0, errors_1.normalizeSdkError)(err));
        }
        this.logger.trace("Issuing 'increaseTtl' request; ttlMilliseconds: %s", (_a = ttlMilliseconds === null || ttlMilliseconds === void 0 ? void 0 : ttlMilliseconds.toString()) !== null && _a !== void 0 ? _a : 'null');
        const result = await this.sendIncreaseTtl(cacheName, this.convert(key), ttlMilliseconds);
        this.logger.trace("'increaseTtl' request result: %s", (0, utils_1.truncateString)(result.toString()));
        return result;
    }
    async sendIncreaseTtl(cacheName, key, ttlMilliseconds) {
        const request = new grpcCache._UpdateTtlRequest({
            cache_key: key,
            increase_to_milliseconds: ttlMilliseconds,
        });
        const metadata = this.createMetadata(cacheName);
        return await new Promise(resolve => {
            this.clientWrapper.getClient().UpdateTtl(request, metadata, {
                interceptors: this.interceptors,
            }, (err, resp) => {
                if (resp === null || resp === void 0 ? void 0 : resp.missing) {
                    resolve(new __1.CacheIncreaseTtl.Miss());
                }
                else if (resp === null || resp === void 0 ? void 0 : resp.set) {
                    resolve(new __1.CacheIncreaseTtl.Set());
                }
                else {
                    resolve(new __1.CacheIncreaseTtl.Error((0, cache_service_error_mapper_1.cacheServiceErrorMapper)(err)));
                }
            });
        });
    }
    async decreaseTtl(cacheName, key, ttlMilliseconds) {
        var _a;
        try {
            (0, utils_1.validateCacheName)(cacheName);
            (0, utils_1.validateValidForSeconds)(ttlMilliseconds);
        }
        catch (err) {
            return new __1.CacheDecreaseTtl.Error((0, errors_1.normalizeSdkError)(err));
        }
        this.logger.trace("Issuing 'decreaseTtl' request; ttlMilliseconds: %s", (_a = ttlMilliseconds === null || ttlMilliseconds === void 0 ? void 0 : ttlMilliseconds.toString()) !== null && _a !== void 0 ? _a : 'null');
        const result = await this.sendDecreaseTtl(cacheName, this.convert(key), ttlMilliseconds);
        this.logger.trace("'decreaseTtl' request result: %s", (0, utils_1.truncateString)(result.toString()));
        return result;
    }
    async sendDecreaseTtl(cacheName, key, ttlMilliseconds) {
        const request = new grpcCache._UpdateTtlRequest({
            cache_key: key,
            decrease_to_milliseconds: ttlMilliseconds,
        });
        const metadata = this.createMetadata(cacheName);
        return await new Promise(resolve => {
            this.clientWrapper.getClient().UpdateTtl(request, metadata, {
                interceptors: this.interceptors,
            }, (err, resp) => {
                if (resp === null || resp === void 0 ? void 0 : resp.missing) {
                    resolve(new __1.CacheDecreaseTtl.Miss());
                }
                else if (resp === null || resp === void 0 ? void 0 : resp.set) {
                    resolve(new __1.CacheDecreaseTtl.Set());
                }
                else {
                    resolve(new __1.CacheDecreaseTtl.Error((0, cache_service_error_mapper_1.cacheServiceErrorMapper)(err)));
                }
            });
        });
    }
    createMetadata(cacheName) {
        const metadata = new grpc_js_1.Metadata();
        metadata.set('cache', cacheName);
        return metadata;
    }
    toSingletonFieldValuePair(field, value) {
        return [
            new grpcCache._DictionaryFieldValuePair({
                field: field,
                value: value,
            }),
        ];
    }
}
exports.DataClient = DataClient;
DataClient.DEFAULT_REQUEST_TIMEOUT_MS = 5 * 1000;
//# sourceMappingURL=data:application/json;base64,