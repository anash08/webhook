"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.PubsubClient = void 0;
const generated_types_1 = require("@gomomento/generated-types");
var grpcPubsub = generated_types_1.pubsub.cache_client.pubsub;
// older versions of node don't have the global util variables https://github.com/nodejs/node/issues/20365
const headers_interceptor_1 = require("./grpc/headers-interceptor");
const client_timeout_interceptor_1 = require("./grpc/client-timeout-interceptor");
const cache_service_error_mapper_1 = require("../errors/cache-service-error-mapper");
const grpc_js_1 = require("@grpc/grpc-js");
const constants_1 = require("@grpc/grpc-js/build/src/constants");
const package_json_1 = require("../../package.json");
const middlewares_interceptor_1 = require("./grpc/middlewares-interceptor");
const __1 = require("../");
const utils_1 = require("@gomomento/sdk-core/dist/src/internal/utils");
const AbstractPubsubClient_1 = require("@gomomento/sdk-core/dist/src/internal/clients/pubsub/AbstractPubsubClient");
class PubsubClient extends AbstractPubsubClient_1.AbstractPubsubClient {
    /**
     * @param {TopicClientProps} props
     */
    constructor(props) {
        super();
        this.configuration = props.configuration;
        this.credentialProvider = props.credentialProvider;
        this.logger = this.configuration.getLoggerFactory().getLogger(this);
        this.unaryRequestTimeoutMs = PubsubClient.DEFAULT_REQUEST_TIMEOUT_MS;
        this.logger.debug(`Creating topic client using endpoint: '${this.credentialProvider.getCacheEndpoint()}'`);
        this.client = new grpcPubsub.PubsubClient(this.credentialProvider.getCacheEndpoint(), grpc_js_1.ChannelCredentials.createSsl(), {
            // default value for max session memory is 10mb.  Under high load, it is easy to exceed this,
            // after which point all requests will fail with a client-side RESOURCE_EXHAUSTED exception.
            'grpc-node.max_session_memory': PubsubClient.DEFAULT_MAX_SESSION_MEMORY_MB,
            // This flag controls whether channels use a shared global pool of subchannels, or whether
            // each channel gets its own subchannel pool.  The default value is 0, meaning a single global
            // pool.  Setting it to 1 provides significant performance improvements when we instantiate more
            // than one grpc client.
            'grpc.use_local_subchannel_pool': 1,
        });
        const headers = [
            new headers_interceptor_1.Header('Authorization', this.credentialProvider.getAuthToken()),
            new headers_interceptor_1.Header('Agent', `nodejs:${package_json_1.version}`),
        ];
        this.unaryInterceptors = PubsubClient.initializeUnaryInterceptors(headers, props.configuration, this.unaryRequestTimeoutMs);
        this.streamingInterceptors =
            PubsubClient.initializeStreamingInterceptors(headers);
    }
    getEndpoint() {
        const endpoint = this.credentialProvider.getCacheEndpoint();
        this.logger.debug(`Using cache endpoint: ${endpoint}`);
        return endpoint;
    }
    async sendPublish(cacheName, topicName, value) {
        const topicValue = new grpcPubsub._TopicValue();
        if (typeof value === 'string') {
            topicValue.text = value;
        }
        else {
            topicValue.binary = value;
        }
        const request = new grpcPubsub._PublishRequest({
            cache_name: cacheName,
            topic: topicName,
            value: topicValue,
        });
        return await new Promise(resolve => {
            this.client.Publish(request, {
                interceptors: this.unaryInterceptors,
            }, (err, resp) => {
                if (resp) {
                    resolve(new __1.TopicPublish.Success());
                }
                else {
                    resolve(new __1.TopicPublish.Error((0, cache_service_error_mapper_1.cacheServiceErrorMapper)(err)));
                }
            });
        });
    }
    /**
     * @remark This method is responsible for restarting the stream if it ends unexpectedly.
     * Since we return a single subscription object to the user, we need to update it with the
     * unsubscribe function should we restart the stream. This is why we pass the subscription
     * state and subscription object to this method.
     *
     * Handling a cache not exists requires special care as well. In the most likely case,
     * when the subscription starts and the cache does not exist, we receive an error immediately.
     * We return an error from the subscribe method and do immediately unsubscribe. In a distinct,
     * unlikely but possible case, the user deletes the cache while the stream is running. In this
     * case we already returned a subscription object to the user, so we instead cancel the stream and
     * propagate an error to the user via the error handler.
     */
    sendSubscribe(options) {
        const request = new grpcPubsub._SubscriptionRequest({
            cache_name: options.cacheName,
            topic: options.topicName,
            resume_at_topic_sequence_number: options.subscriptionState.resumeAtTopicSequenceNumber,
        });
        const call = this.client.Subscribe(request, {
            interceptors: this.streamingInterceptors,
        });
        options.subscriptionState.setSubscribed();
        // Allow the caller to cancel the stream.
        // Note that because we restart the stream on error or stream end,
        // we need to ensure we keep the same subscription object. That way
        // stream restarts are transparent to the caller.
        options.subscriptionState.unsubscribeFn = () => {
            call.cancel();
        };
        return new Promise(resolve => {
            const prepareCallbackOptions = {
                ...options,
                restartedDueToError: false,
                firstMessage: true,
                resolve,
            };
            call.on('data', this.prepareDataCallback(prepareCallbackOptions));
            call.on('error', this.prepareErrorCallback(prepareCallbackOptions));
            call.on('end', this.prepareEndCallback(prepareCallbackOptions));
        });
    }
    prepareDataCallback(options) {
        return (resp) => {
            if (options.firstMessage) {
                options.resolve(options.subscription);
            }
            options.firstMessage = false;
            if (resp === null || resp === void 0 ? void 0 : resp.item) {
                options.subscriptionState.lastTopicSequenceNumber =
                    resp.item.topic_sequence_number;
                if (resp.item.value.text) {
                    options.onItem(new __1.TopicItem(resp.item.value.text));
                }
                else if (resp.item.value.binary) {
                    options.onItem(new __1.TopicItem(resp.item.value.binary));
                }
                else {
                    this.logger.error('Received subscription item with unknown type; topic: %s', (0, utils_1.truncateString)(options.topicName));
                    options.onError(new __1.TopicSubscribe.Error(new __1.UnknownError('Unknown item value type')), options.subscription);
                }
            }
            else if (resp === null || resp === void 0 ? void 0 : resp.heartbeat) {
                this.logger.trace('Received heartbeat from subscription stream; topic: %s', (0, utils_1.truncateString)(options.topicName));
            }
            else if (resp === null || resp === void 0 ? void 0 : resp.discontinuity) {
                this.logger.trace('Received discontinuity from subscription stream; topic: %s', (0, utils_1.truncateString)(options.topicName));
            }
            else {
                this.logger.error('Received unknown subscription item; topic: %s', (0, utils_1.truncateString)(options.topicName));
                options.onError(new __1.TopicSubscribe.Error(new __1.UnknownError('Unknown item type')), options.subscription);
            }
        };
    }
    prepareErrorCallback(options) {
        return (err) => {
            // When the caller unsubscribes, we may get a follow on error, which we ignore.
            if (!options.subscriptionState.isSubscribed) {
                return;
            }
            const serviceError = err;
            const isRstStreamNoError = serviceError.code === constants_1.Status.INTERNAL &&
                serviceError.details === PubsubClient.RST_STREAM_NO_ERROR_MESSAGE;
            const momentoError = new __1.TopicSubscribe.Error((0, cache_service_error_mapper_1.cacheServiceErrorMapper)(serviceError));
            this.handleSubscribeError(options, momentoError, isRstStreamNoError);
        };
    }
    static initializeUnaryInterceptors(headers, configuration, requestTimeoutMs) {
        return [
            (0, middlewares_interceptor_1.middlewaresInterceptor)(configuration.getLoggerFactory(), [], {}),
            new headers_interceptor_1.HeaderInterceptorProvider(headers).createHeadersInterceptor(),
            (0, client_timeout_interceptor_1.ClientTimeoutInterceptor)(requestTimeoutMs),
        ];
    }
    // TODO https://github.com/momentohq/client-sdk-nodejs/issues/349
    // decide on streaming interceptors and middlewares
    static initializeStreamingInterceptors(headers) {
        return [new headers_interceptor_1.HeaderInterceptorProvider(headers).createHeadersInterceptor()];
    }
}
exports.PubsubClient = PubsubClient;
PubsubClient.DEFAULT_REQUEST_TIMEOUT_MS = 5 * 1000;
PubsubClient.DEFAULT_MAX_SESSION_MEMORY_MB = 256;
PubsubClient.RST_STREAM_NO_ERROR_MESSAGE = 'Received RST_STREAM with code 0';
//# sourceMappingURL=data:application/json;base64,