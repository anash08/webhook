"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.CacheConfiguration = void 0;
class CacheConfiguration {
    constructor(props) {
        this.loggerFactory = props.loggerFactory;
        this.retryStrategy = props.retryStrategy;
        this.transportStrategy = props.transportStrategy;
        this.middlewares = props.middlewares;
    }
    getLoggerFactory() {
        return this.loggerFactory;
    }
    getRetryStrategy() {
        return this.retryStrategy;
    }
    withRetryStrategy(retryStrategy) {
        return new CacheConfiguration({
            loggerFactory: this.loggerFactory,
            retryStrategy: retryStrategy,
            transportStrategy: this.transportStrategy,
            middlewares: this.middlewares,
        });
    }
    getTransportStrategy() {
        return this.transportStrategy;
    }
    withTransportStrategy(transportStrategy) {
        return new CacheConfiguration({
            loggerFactory: this.loggerFactory,
            retryStrategy: this.retryStrategy,
            transportStrategy: transportStrategy,
            middlewares: this.middlewares,
        });
    }
    getMiddlewares() {
        return this.middlewares;
    }
    withMiddlewares(middlewares) {
        return new CacheConfiguration({
            loggerFactory: this.loggerFactory,
            retryStrategy: this.retryStrategy,
            transportStrategy: this.transportStrategy,
            middlewares: middlewares,
        });
    }
    addMiddleware(middleware) {
        return new CacheConfiguration({
            loggerFactory: this.loggerFactory,
            retryStrategy: this.retryStrategy,
            transportStrategy: this.transportStrategy,
            middlewares: [middleware, ...this.middlewares],
        });
    }
    withClientTimeoutMillis(clientTimeout) {
        return new CacheConfiguration({
            loggerFactory: this.loggerFactory,
            retryStrategy: this.retryStrategy,
            transportStrategy: this.transportStrategy.withClientTimeoutMillis(clientTimeout),
            middlewares: this.middlewares,
        });
    }
}
exports.CacheConfiguration = CacheConfiguration;
//# sourceMappingURL=data:application/json;base64,