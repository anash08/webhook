"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ExperimentalMetricsCsvMiddleware = void 0;
const fs = require("fs");
const experimental_metrics_middleware_1 = require("./impl/experimental-metrics-middleware");
class ExperimentalMetricsCsvMiddlewareRequestHandler extends experimental_metrics_middleware_1.ExperimentalMetricsMiddlewareRequestHandler {
    constructor(parent, logger, context, csvPath) {
        super(parent, logger, context);
        this.csvPath = csvPath;
    }
    async emitMetrics(metrics) {
        const csvRow = [
            metrics.numActiveRequestsAtStart,
            metrics.numActiveRequestsAtFinish,
            metrics.requestType,
            metrics.status,
            metrics.startTime,
            metrics.requestBodyTime,
            metrics.endTime,
            metrics.duration,
            metrics.requestSize,
            metrics.responseSize,
            metrics.connectionID,
        ].join(',');
        try {
            await fs.promises.appendFile(this.csvPath, `${csvRow}\n`);
        }
        catch (err) {
            if (err !== null) {
                this.logger.error('Error writing to metrics csv file at path: %s : %s', this.csvPath, err);
            }
        }
    }
}
/**
 * This middleware enables per-request client-side metrics.  Metrics for each
 * request will be written to a CSV file; this file can be analyzed or shared
 * with Momento to diagnose performance issues.
 *
 * The metrics format is currently considered experimental; in a future release,
 * once the format is considered stable, this class will be renamed to remove
 * the Experimental prefix.
 *
 * WARNING: enabling this middleware may have minor performance implications,
 * so enable with caution.
 *
 * WARNING: depending on your request volume, the CSV file size may grow quickly;
 * neither sampling nor file compression / rotation are included at this time
 * (though they may be added in the future).
 *
 * See `advanced.ts` in the examples directory for an example of how to set up
 * your {Configuration} to enable this middleware.
 */
class ExperimentalMetricsCsvMiddleware extends experimental_metrics_middleware_1.ExperimentalMetricsMiddleware {
    constructor(csvPath, loggerFactory) {
        super(loggerFactory, (p, l, c) => new ExperimentalMetricsCsvMiddlewareRequestHandler(p, l, c, csvPath));
        this.csvPath = csvPath;
        fs.writeFileSync(this.csvPath, `${this.fieldNames().join(',')}\n`);
    }
}
exports.ExperimentalMetricsCsvMiddleware = ExperimentalMetricsCsvMiddleware;
ExperimentalMetricsCsvMiddleware.numActiveRequests = 0;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXhwZXJpbWVudGFsLW1ldHJpY3MtY3N2LW1pZGRsZXdhcmUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvY29uZmlnL21pZGRsZXdhcmUvZXhwZXJpbWVudGFsLW1ldHJpY3MtY3N2LW1pZGRsZXdhcmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEseUJBQXlCO0FBRXpCLDRGQUlnRDtBQUdoRCxNQUFNLDhDQUErQyxTQUFRLDZFQUEyQztJQUd0RyxZQUNFLE1BQXFDLEVBQ3JDLE1BQXFCLEVBQ3JCLE9BQXdDLEVBQ3hDLE9BQWU7UUFFZixLQUFLLENBQUMsTUFBTSxFQUFFLE1BQU0sRUFBRSxPQUFPLENBQUMsQ0FBQztRQUMvQixJQUFJLENBQUMsT0FBTyxHQUFHLE9BQU8sQ0FBQztJQUN6QixDQUFDO0lBRUQsS0FBSyxDQUFDLFdBQVcsQ0FBQyxPQUFtQztRQUNuRCxNQUFNLE1BQU0sR0FBRztZQUNiLE9BQU8sQ0FBQyx3QkFBd0I7WUFDaEMsT0FBTyxDQUFDLHlCQUF5QjtZQUNqQyxPQUFPLENBQUMsV0FBVztZQUNuQixPQUFPLENBQUMsTUFBTTtZQUNkLE9BQU8sQ0FBQyxTQUFTO1lBQ2pCLE9BQU8sQ0FBQyxlQUFlO1lBQ3ZCLE9BQU8sQ0FBQyxPQUFPO1lBQ2YsT0FBTyxDQUFDLFFBQVE7WUFDaEIsT0FBTyxDQUFDLFdBQVc7WUFDbkIsT0FBTyxDQUFDLFlBQVk7WUFDcEIsT0FBTyxDQUFDLFlBQVk7U0FDckIsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDWixJQUFJO1lBQ0YsTUFBTSxFQUFFLENBQUMsUUFBUSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsT0FBTyxFQUFFLEdBQUcsTUFBTSxJQUFJLENBQUMsQ0FBQztTQUMzRDtRQUFDLE9BQU8sR0FBRyxFQUFFO1lBQ1osSUFBSSxHQUFHLEtBQUssSUFBSSxFQUFFO2dCQUNoQixJQUFJLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FDZixvREFBb0QsRUFDcEQsSUFBSSxDQUFDLE9BQU8sRUFDWixHQUFHLENBQ0osQ0FBQzthQUNIO1NBQ0Y7SUFDSCxDQUFDO0NBQ0Y7QUFFRDs7Ozs7Ozs7Ozs7Ozs7Ozs7O0dBa0JHO0FBQ0gsTUFBYSxnQ0FBaUMsU0FBUSwrREFBNkI7SUFLakYsWUFBWSxPQUFlLEVBQUUsYUFBbUM7UUFDOUQsS0FBSyxDQUNILGFBQWEsRUFDYixDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUUsQ0FDVixJQUFJLDhDQUE4QyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLE9BQU8sQ0FBQyxDQUN2RSxDQUFDO1FBQ0YsSUFBSSxDQUFDLE9BQU8sR0FBRyxPQUFPLENBQUM7UUFDdkIsRUFBRSxDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUMsT0FBTyxFQUFFLEdBQUcsSUFBSSxDQUFDLFVBQVUsRUFBRSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDckUsQ0FBQzs7QUFiSCw0RUFjQztBQWJRLGtEQUFpQixHQUFHLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIGZzIGZyb20gJ2ZzJztcbmltcG9ydCB7TW9tZW50b0xvZ2dlciwgTW9tZW50b0xvZ2dlckZhY3Rvcnl9IGZyb20gJy4uLy4uLyc7XG5pbXBvcnQge1xuICBFeHBlcmltZW50YWxNZXRyaWNzTWlkZGxld2FyZSxcbiAgRXhwZXJpbWVudGFsTWV0cmljc01pZGRsZXdhcmVSZXF1ZXN0SGFuZGxlcixcbiAgRXhwZXJpbWVudGFsUmVxdWVzdE1ldHJpY3MsXG59IGZyb20gJy4vaW1wbC9leHBlcmltZW50YWwtbWV0cmljcy1taWRkbGV3YXJlJztcbmltcG9ydCB7TWlkZGxld2FyZVJlcXVlc3RIYW5kbGVyQ29udGV4dH0gZnJvbSAnLi9taWRkbGV3YXJlJztcblxuY2xhc3MgRXhwZXJpbWVudGFsTWV0cmljc0Nzdk1pZGRsZXdhcmVSZXF1ZXN0SGFuZGxlciBleHRlbmRzIEV4cGVyaW1lbnRhbE1ldHJpY3NNaWRkbGV3YXJlUmVxdWVzdEhhbmRsZXIge1xuICBwcml2YXRlIHJlYWRvbmx5IGNzdlBhdGg6IHN0cmluZztcblxuICBjb25zdHJ1Y3RvcihcbiAgICBwYXJlbnQ6IEV4cGVyaW1lbnRhbE1ldHJpY3NNaWRkbGV3YXJlLFxuICAgIGxvZ2dlcjogTW9tZW50b0xvZ2dlcixcbiAgICBjb250ZXh0OiBNaWRkbGV3YXJlUmVxdWVzdEhhbmRsZXJDb250ZXh0LFxuICAgIGNzdlBhdGg6IHN0cmluZ1xuICApIHtcbiAgICBzdXBlcihwYXJlbnQsIGxvZ2dlciwgY29udGV4dCk7XG4gICAgdGhpcy5jc3ZQYXRoID0gY3N2UGF0aDtcbiAgfVxuXG4gIGFzeW5jIGVtaXRNZXRyaWNzKG1ldHJpY3M6IEV4cGVyaW1lbnRhbFJlcXVlc3RNZXRyaWNzKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgY29uc3QgY3N2Um93ID0gW1xuICAgICAgbWV0cmljcy5udW1BY3RpdmVSZXF1ZXN0c0F0U3RhcnQsXG4gICAgICBtZXRyaWNzLm51bUFjdGl2ZVJlcXVlc3RzQXRGaW5pc2gsXG4gICAgICBtZXRyaWNzLnJlcXVlc3RUeXBlLFxuICAgICAgbWV0cmljcy5zdGF0dXMsXG4gICAgICBtZXRyaWNzLnN0YXJ0VGltZSxcbiAgICAgIG1ldHJpY3MucmVxdWVzdEJvZHlUaW1lLFxuICAgICAgbWV0cmljcy5lbmRUaW1lLFxuICAgICAgbWV0cmljcy5kdXJhdGlvbixcbiAgICAgIG1ldHJpY3MucmVxdWVzdFNpemUsXG4gICAgICBtZXRyaWNzLnJlc3BvbnNlU2l6ZSxcbiAgICAgIG1ldHJpY3MuY29ubmVjdGlvbklELFxuICAgIF0uam9pbignLCcpO1xuICAgIHRyeSB7XG4gICAgICBhd2FpdCBmcy5wcm9taXNlcy5hcHBlbmRGaWxlKHRoaXMuY3N2UGF0aCwgYCR7Y3N2Um93fVxcbmApO1xuICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgaWYgKGVyciAhPT0gbnVsbCkge1xuICAgICAgICB0aGlzLmxvZ2dlci5lcnJvcihcbiAgICAgICAgICAnRXJyb3Igd3JpdGluZyB0byBtZXRyaWNzIGNzdiBmaWxlIGF0IHBhdGg6ICVzIDogJXMnLFxuICAgICAgICAgIHRoaXMuY3N2UGF0aCxcbiAgICAgICAgICBlcnJcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxuLyoqXG4gKiBUaGlzIG1pZGRsZXdhcmUgZW5hYmxlcyBwZXItcmVxdWVzdCBjbGllbnQtc2lkZSBtZXRyaWNzLiAgTWV0cmljcyBmb3IgZWFjaFxuICogcmVxdWVzdCB3aWxsIGJlIHdyaXR0ZW4gdG8gYSBDU1YgZmlsZTsgdGhpcyBmaWxlIGNhbiBiZSBhbmFseXplZCBvciBzaGFyZWRcbiAqIHdpdGggTW9tZW50byB0byBkaWFnbm9zZSBwZXJmb3JtYW5jZSBpc3N1ZXMuXG4gKlxuICogVGhlIG1ldHJpY3MgZm9ybWF0IGlzIGN1cnJlbnRseSBjb25zaWRlcmVkIGV4cGVyaW1lbnRhbDsgaW4gYSBmdXR1cmUgcmVsZWFzZSxcbiAqIG9uY2UgdGhlIGZvcm1hdCBpcyBjb25zaWRlcmVkIHN0YWJsZSwgdGhpcyBjbGFzcyB3aWxsIGJlIHJlbmFtZWQgdG8gcmVtb3ZlXG4gKiB0aGUgRXhwZXJpbWVudGFsIHByZWZpeC5cbiAqXG4gKiBXQVJOSU5HOiBlbmFibGluZyB0aGlzIG1pZGRsZXdhcmUgbWF5IGhhdmUgbWlub3IgcGVyZm9ybWFuY2UgaW1wbGljYXRpb25zLFxuICogc28gZW5hYmxlIHdpdGggY2F1dGlvbi5cbiAqXG4gKiBXQVJOSU5HOiBkZXBlbmRpbmcgb24geW91ciByZXF1ZXN0IHZvbHVtZSwgdGhlIENTViBmaWxlIHNpemUgbWF5IGdyb3cgcXVpY2tseTtcbiAqIG5laXRoZXIgc2FtcGxpbmcgbm9yIGZpbGUgY29tcHJlc3Npb24gLyByb3RhdGlvbiBhcmUgaW5jbHVkZWQgYXQgdGhpcyB0aW1lXG4gKiAodGhvdWdoIHRoZXkgbWF5IGJlIGFkZGVkIGluIHRoZSBmdXR1cmUpLlxuICpcbiAqIFNlZSBgYWR2YW5jZWQudHNgIGluIHRoZSBleGFtcGxlcyBkaXJlY3RvcnkgZm9yIGFuIGV4YW1wbGUgb2YgaG93IHRvIHNldCB1cFxuICogeW91ciB7Q29uZmlndXJhdGlvbn0gdG8gZW5hYmxlIHRoaXMgbWlkZGxld2FyZS5cbiAqL1xuZXhwb3J0IGNsYXNzIEV4cGVyaW1lbnRhbE1ldHJpY3NDc3ZNaWRkbGV3YXJlIGV4dGVuZHMgRXhwZXJpbWVudGFsTWV0cmljc01pZGRsZXdhcmUge1xuICBzdGF0aWMgbnVtQWN0aXZlUmVxdWVzdHMgPSAwO1xuXG4gIHByaXZhdGUgcmVhZG9ubHkgY3N2UGF0aDogc3RyaW5nO1xuXG4gIGNvbnN0cnVjdG9yKGNzdlBhdGg6IHN0cmluZywgbG9nZ2VyRmFjdG9yeTogTW9tZW50b0xvZ2dlckZhY3RvcnkpIHtcbiAgICBzdXBlcihcbiAgICAgIGxvZ2dlckZhY3RvcnksXG4gICAgICAocCwgbCwgYykgPT5cbiAgICAgICAgbmV3IEV4cGVyaW1lbnRhbE1ldHJpY3NDc3ZNaWRkbGV3YXJlUmVxdWVzdEhhbmRsZXIocCwgbCwgYywgY3N2UGF0aClcbiAgICApO1xuICAgIHRoaXMuY3N2UGF0aCA9IGNzdlBhdGg7XG4gICAgZnMud3JpdGVGaWxlU3luYyh0aGlzLmNzdlBhdGgsIGAke3RoaXMuZmllbGROYW1lcygpLmpvaW4oJywnKX1cXG5gKTtcbiAgfVxufVxuIl19