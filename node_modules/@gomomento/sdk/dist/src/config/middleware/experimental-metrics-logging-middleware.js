"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ExperimentalMetricsLoggingMiddleware = void 0;
const experimental_metrics_middleware_1 = require("./impl/experimental-metrics-middleware");
class ExperimentalMetricsLoggingMiddlewareRequestHandler extends experimental_metrics_middleware_1.ExperimentalMetricsMiddlewareRequestHandler {
    constructor(parent, logger, context) {
        super(parent, logger, context);
    }
    emitMetrics(metrics) {
        this.logger.info(JSON.stringify(metrics));
        return Promise.resolve();
    }
}
/**
 * This middleware enables per-request client-side metrics.  Metrics for each
 * request will be written to logs; the log data can be analyzed or shared
 * with Momento to diagnose performance issues.
 *
 * The metrics format is currently considered experimental; in a future release,
 * once the format is considered stable, this class will be renamed to remove
 * the Experimental prefix.
 *
 * WARNING: enabling this middleware may have minor performance implications,
 * so enable with caution.
 *
 * WARNING: depending on your request volume, this middleware will produce a high
 * volume of log output. If you are writing logs directly to local disk, be aware
 * of disk usage and make sure you have log rotation / compression enabled via a
 * tool such as `logrotate`.
 *
 * See `advanced.ts` in the examples directory for an example of how to set up
 * your {Configuration} to enable this middleware.
 */
class ExperimentalMetricsLoggingMiddleware extends experimental_metrics_middleware_1.ExperimentalMetricsMiddleware {
    constructor(loggerFactory) {
        super(loggerFactory, (p, l, c) => new ExperimentalMetricsLoggingMiddlewareRequestHandler(p, l, c));
    }
}
exports.ExperimentalMetricsLoggingMiddleware = ExperimentalMetricsLoggingMiddleware;
ExperimentalMetricsLoggingMiddleware.numActiveRequests = 0;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXhwZXJpbWVudGFsLW1ldHJpY3MtbG9nZ2luZy1taWRkbGV3YXJlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL2NvbmZpZy9taWRkbGV3YXJlL2V4cGVyaW1lbnRhbC1tZXRyaWNzLWxvZ2dpbmctbWlkZGxld2FyZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFDQSw0RkFJZ0Q7QUFHaEQsTUFBTSxrREFBbUQsU0FBUSw2RUFBMkM7SUFDMUcsWUFDRSxNQUFxQyxFQUNyQyxNQUFxQixFQUNyQixPQUF3QztRQUV4QyxLQUFLLENBQUMsTUFBTSxFQUFFLE1BQU0sRUFBRSxPQUFPLENBQUMsQ0FBQztJQUNqQyxDQUFDO0lBRUQsV0FBVyxDQUFDLE9BQW1DO1FBQzdDLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQztRQUMxQyxPQUFPLE9BQU8sQ0FBQyxPQUFPLEVBQUUsQ0FBQztJQUMzQixDQUFDO0NBQ0Y7QUFFRDs7Ozs7Ozs7Ozs7Ozs7Ozs7OztHQW1CRztBQUNILE1BQWEsb0NBQXFDLFNBQVEsK0RBQTZCO0lBR3JGLFlBQVksYUFBbUM7UUFDN0MsS0FBSyxDQUNILGFBQWEsRUFDYixDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUUsQ0FDVixJQUFJLGtEQUFrRCxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQ2xFLENBQUM7SUFDSixDQUFDOztBQVRILG9GQVVDO0FBVFEsc0RBQWlCLEdBQUcsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtNb21lbnRvTG9nZ2VyLCBNb21lbnRvTG9nZ2VyRmFjdG9yeX0gZnJvbSAnLi4vLi4vJztcbmltcG9ydCB7XG4gIEV4cGVyaW1lbnRhbE1ldHJpY3NNaWRkbGV3YXJlLFxuICBFeHBlcmltZW50YWxNZXRyaWNzTWlkZGxld2FyZVJlcXVlc3RIYW5kbGVyLFxuICBFeHBlcmltZW50YWxSZXF1ZXN0TWV0cmljcyxcbn0gZnJvbSAnLi9pbXBsL2V4cGVyaW1lbnRhbC1tZXRyaWNzLW1pZGRsZXdhcmUnO1xuaW1wb3J0IHtNaWRkbGV3YXJlUmVxdWVzdEhhbmRsZXJDb250ZXh0fSBmcm9tICcuL21pZGRsZXdhcmUnO1xuXG5jbGFzcyBFeHBlcmltZW50YWxNZXRyaWNzTG9nZ2luZ01pZGRsZXdhcmVSZXF1ZXN0SGFuZGxlciBleHRlbmRzIEV4cGVyaW1lbnRhbE1ldHJpY3NNaWRkbGV3YXJlUmVxdWVzdEhhbmRsZXIge1xuICBjb25zdHJ1Y3RvcihcbiAgICBwYXJlbnQ6IEV4cGVyaW1lbnRhbE1ldHJpY3NNaWRkbGV3YXJlLFxuICAgIGxvZ2dlcjogTW9tZW50b0xvZ2dlcixcbiAgICBjb250ZXh0OiBNaWRkbGV3YXJlUmVxdWVzdEhhbmRsZXJDb250ZXh0XG4gICkge1xuICAgIHN1cGVyKHBhcmVudCwgbG9nZ2VyLCBjb250ZXh0KTtcbiAgfVxuXG4gIGVtaXRNZXRyaWNzKG1ldHJpY3M6IEV4cGVyaW1lbnRhbFJlcXVlc3RNZXRyaWNzKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgdGhpcy5sb2dnZXIuaW5mbyhKU09OLnN0cmluZ2lmeShtZXRyaWNzKSk7XG4gICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSgpO1xuICB9XG59XG5cbi8qKlxuICogVGhpcyBtaWRkbGV3YXJlIGVuYWJsZXMgcGVyLXJlcXVlc3QgY2xpZW50LXNpZGUgbWV0cmljcy4gIE1ldHJpY3MgZm9yIGVhY2hcbiAqIHJlcXVlc3Qgd2lsbCBiZSB3cml0dGVuIHRvIGxvZ3M7IHRoZSBsb2cgZGF0YSBjYW4gYmUgYW5hbHl6ZWQgb3Igc2hhcmVkXG4gKiB3aXRoIE1vbWVudG8gdG8gZGlhZ25vc2UgcGVyZm9ybWFuY2UgaXNzdWVzLlxuICpcbiAqIFRoZSBtZXRyaWNzIGZvcm1hdCBpcyBjdXJyZW50bHkgY29uc2lkZXJlZCBleHBlcmltZW50YWw7IGluIGEgZnV0dXJlIHJlbGVhc2UsXG4gKiBvbmNlIHRoZSBmb3JtYXQgaXMgY29uc2lkZXJlZCBzdGFibGUsIHRoaXMgY2xhc3Mgd2lsbCBiZSByZW5hbWVkIHRvIHJlbW92ZVxuICogdGhlIEV4cGVyaW1lbnRhbCBwcmVmaXguXG4gKlxuICogV0FSTklORzogZW5hYmxpbmcgdGhpcyBtaWRkbGV3YXJlIG1heSBoYXZlIG1pbm9yIHBlcmZvcm1hbmNlIGltcGxpY2F0aW9ucyxcbiAqIHNvIGVuYWJsZSB3aXRoIGNhdXRpb24uXG4gKlxuICogV0FSTklORzogZGVwZW5kaW5nIG9uIHlvdXIgcmVxdWVzdCB2b2x1bWUsIHRoaXMgbWlkZGxld2FyZSB3aWxsIHByb2R1Y2UgYSBoaWdoXG4gKiB2b2x1bWUgb2YgbG9nIG91dHB1dC4gSWYgeW91IGFyZSB3cml0aW5nIGxvZ3MgZGlyZWN0bHkgdG8gbG9jYWwgZGlzaywgYmUgYXdhcmVcbiAqIG9mIGRpc2sgdXNhZ2UgYW5kIG1ha2Ugc3VyZSB5b3UgaGF2ZSBsb2cgcm90YXRpb24gLyBjb21wcmVzc2lvbiBlbmFibGVkIHZpYSBhXG4gKiB0b29sIHN1Y2ggYXMgYGxvZ3JvdGF0ZWAuXG4gKlxuICogU2VlIGBhZHZhbmNlZC50c2AgaW4gdGhlIGV4YW1wbGVzIGRpcmVjdG9yeSBmb3IgYW4gZXhhbXBsZSBvZiBob3cgdG8gc2V0IHVwXG4gKiB5b3VyIHtDb25maWd1cmF0aW9ufSB0byBlbmFibGUgdGhpcyBtaWRkbGV3YXJlLlxuICovXG5leHBvcnQgY2xhc3MgRXhwZXJpbWVudGFsTWV0cmljc0xvZ2dpbmdNaWRkbGV3YXJlIGV4dGVuZHMgRXhwZXJpbWVudGFsTWV0cmljc01pZGRsZXdhcmUge1xuICBzdGF0aWMgbnVtQWN0aXZlUmVxdWVzdHMgPSAwO1xuXG4gIGNvbnN0cnVjdG9yKGxvZ2dlckZhY3Rvcnk6IE1vbWVudG9Mb2dnZXJGYWN0b3J5KSB7XG4gICAgc3VwZXIoXG4gICAgICBsb2dnZXJGYWN0b3J5LFxuICAgICAgKHAsIGwsIGMpID0+XG4gICAgICAgIG5ldyBFeHBlcmltZW50YWxNZXRyaWNzTG9nZ2luZ01pZGRsZXdhcmVSZXF1ZXN0SGFuZGxlcihwLCBsLCBjKVxuICAgICk7XG4gIH1cbn1cbiJdfQ==